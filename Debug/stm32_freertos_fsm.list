
stm32_freertos_fsm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046a8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  080047b8  080047b8  000147b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004924  08004924  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004924  08004924  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004924  08004924  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004924  08004924  00014924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004928  08004928  00014928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800492c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002604  20000010  0800493c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002614  0800493c  00022614  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011c37  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b78  00000000  00000000  00031cb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b8  00000000  00000000  00034830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ce9  00000000  00000000  000358e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000025cd  00000000  00000000  000365d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000114c1  00000000  00000000  00038b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000912d7  00000000  00000000  0004a05f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000457c  00000000  00000000  000db338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000df8b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080047a0 	.word	0x080047a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080047a0 	.word	0x080047a0

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fb06 	bl	8000764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f86e 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f8a8 	bl	80002b0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000160:	f001 fc3e 	bl	80019e0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of stateQueue */
  stateQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &stateQueue_attributes);
 8000164:	4a23      	ldr	r2, [pc, #140]	; (80001f4 <main+0xa4>)
 8000166:	2102      	movs	r1, #2
 8000168:	2010      	movs	r0, #16
 800016a:	f001 fdb7 	bl	8001cdc <osMessageQueueNew>
 800016e:	4603      	mov	r3, r0
 8000170:	4a21      	ldr	r2, [pc, #132]	; (80001f8 <main+0xa8>)
 8000172:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskBlinkShort */
  TaskBlinkShortHandle = osThreadNew(fTaskBlinkShort, NULL, &TaskBlinkShort_attributes);
 8000174:	4a21      	ldr	r2, [pc, #132]	; (80001fc <main+0xac>)
 8000176:	2100      	movs	r1, #0
 8000178:	4821      	ldr	r0, [pc, #132]	; (8000200 <main+0xb0>)
 800017a:	f001 fc97 	bl	8001aac <osThreadNew>
 800017e:	4603      	mov	r3, r0
 8000180:	4a20      	ldr	r2, [pc, #128]	; (8000204 <main+0xb4>)
 8000182:	6013      	str	r3, [r2, #0]

  /* creation of TaskBlinkLong */
  TaskBlinkLongHandle = osThreadNew(fTaskBlinkLong, NULL, &TaskBlinkLong_attributes);
 8000184:	4a20      	ldr	r2, [pc, #128]	; (8000208 <main+0xb8>)
 8000186:	2100      	movs	r1, #0
 8000188:	4820      	ldr	r0, [pc, #128]	; (800020c <main+0xbc>)
 800018a:	f001 fc8f 	bl	8001aac <osThreadNew>
 800018e:	4603      	mov	r3, r0
 8000190:	4a1f      	ldr	r2, [pc, #124]	; (8000210 <main+0xc0>)
 8000192:	6013      	str	r3, [r2, #0]

  /* creation of TaskRealBlink */
  TaskRealBlinkHandle = osThreadNew(fTaskRealBlink, NULL, &TaskRealBlink_attributes);
 8000194:	4a1f      	ldr	r2, [pc, #124]	; (8000214 <main+0xc4>)
 8000196:	2100      	movs	r1, #0
 8000198:	481f      	ldr	r0, [pc, #124]	; (8000218 <main+0xc8>)
 800019a:	f001 fc87 	bl	8001aac <osThreadNew>
 800019e:	4603      	mov	r3, r0
 80001a0:	4a1e      	ldr	r2, [pc, #120]	; (800021c <main+0xcc>)
 80001a2:	6013      	str	r3, [r2, #0]

  /* creation of TaskHandlerFSM */
  TaskHandlerFSMHandle = osThreadNew(fTaskHandlerFSM, NULL, &TaskHandlerFSM_attributes);
 80001a4:	4a1e      	ldr	r2, [pc, #120]	; (8000220 <main+0xd0>)
 80001a6:	2100      	movs	r1, #0
 80001a8:	481e      	ldr	r0, [pc, #120]	; (8000224 <main+0xd4>)
 80001aa:	f001 fc7f 	bl	8001aac <osThreadNew>
 80001ae:	4603      	mov	r3, r0
 80001b0:	4a1d      	ldr	r2, [pc, #116]	; (8000228 <main+0xd8>)
 80001b2:	6013      	str	r3, [r2, #0]

  /* creation of TaskDelayBlink */
  TaskDelayBlinkHandle = osThreadNew(fTaskDelayBlink, NULL, &TaskDelayBlink_attributes);
 80001b4:	4a1d      	ldr	r2, [pc, #116]	; (800022c <main+0xdc>)
 80001b6:	2100      	movs	r1, #0
 80001b8:	481d      	ldr	r0, [pc, #116]	; (8000230 <main+0xe0>)
 80001ba:	f001 fc77 	bl	8001aac <osThreadNew>
 80001be:	4603      	mov	r3, r0
 80001c0:	4a1c      	ldr	r2, [pc, #112]	; (8000234 <main+0xe4>)
 80001c2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* Удаление TaskBlinkShort */
  osThreadTerminate(TaskBlinkShortHandle);
 80001c4:	4b0f      	ldr	r3, [pc, #60]	; (8000204 <main+0xb4>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4618      	mov	r0, r3
 80001ca:	f001 fd19 	bl	8001c00 <osThreadTerminate>

  /* Удаление TaskBlinkLong */
  osThreadTerminate(TaskBlinkLongHandle);
 80001ce:	4b10      	ldr	r3, [pc, #64]	; (8000210 <main+0xc0>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4618      	mov	r0, r3
 80001d4:	f001 fd14 	bl	8001c00 <osThreadTerminate>

  /* Удаление TaskRealBlink */
  osThreadTerminate(TaskRealBlinkHandle);
 80001d8:	4b10      	ldr	r3, [pc, #64]	; (800021c <main+0xcc>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4618      	mov	r0, r3
 80001de:	f001 fd0f 	bl	8001c00 <osThreadTerminate>

  /* Удаление TaskDelayBlink */
  osThreadTerminate(TaskDelayBlinkHandle);
 80001e2:	4b14      	ldr	r3, [pc, #80]	; (8000234 <main+0xe4>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4618      	mov	r0, r3
 80001e8:	f001 fd0a 	bl	8001c00 <osThreadTerminate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001ec:	f001 fc2a 	bl	8001a44 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f0:	e7fe      	b.n	80001f0 <main+0xa0>
 80001f2:	bf00      	nop
 80001f4:	080048e0 	.word	0x080048e0
 80001f8:	20000c0c 	.word	0x20000c0c
 80001fc:	0800482c 	.word	0x0800482c
 8000200:	08000349 	.word	0x08000349
 8000204:	2000002c 	.word	0x2000002c
 8000208:	08004850 	.word	0x08004850
 800020c:	080003ad 	.word	0x080003ad
 8000210:	2000028c 	.word	0x2000028c
 8000214:	08004874 	.word	0x08004874
 8000218:	08000411 	.word	0x08000411
 800021c:	200004ec 	.word	0x200004ec
 8000220:	08004898 	.word	0x08004898
 8000224:	08000459 	.word	0x08000459
 8000228:	2000074c 	.word	0x2000074c
 800022c:	080048bc 	.word	0x080048bc
 8000230:	08000519 	.word	0x08000519
 8000234:	200009ac 	.word	0x200009ac

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b090      	sub	sp, #64	; 0x40
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0318 	add.w	r3, r7, #24
 8000242:	2228      	movs	r2, #40	; 0x28
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f004 fa70 	bl	800472c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]
 8000258:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800025a:	2302      	movs	r3, #2
 800025c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025e:	2301      	movs	r3, #1
 8000260:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000262:	2310      	movs	r3, #16
 8000264:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000266:	2300      	movs	r3, #0
 8000268:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026a:	f107 0318 	add.w	r3, r7, #24
 800026e:	4618      	mov	r0, r3
 8000270:	f000 fd40 	bl	8000cf4 <HAL_RCC_OscConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800027a:	f000 f977 	bl	800056c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027e:	230f      	movs	r3, #15
 8000280:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000282:	2300      	movs	r3, #0
 8000284:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f000 ffae 	bl	80011f8 <HAL_RCC_ClockConfig>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002a2:	f000 f963 	bl	800056c <Error_Handler>
  }
}
 80002a6:	bf00      	nop
 80002a8:	3740      	adds	r7, #64	; 0x40
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
	...

080002b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b088      	sub	sp, #32
 80002b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b6:	f107 0310 	add.w	r3, r7, #16
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002c4:	4b1e      	ldr	r3, [pc, #120]	; (8000340 <MX_GPIO_Init+0x90>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	4a1d      	ldr	r2, [pc, #116]	; (8000340 <MX_GPIO_Init+0x90>)
 80002ca:	f043 0310 	orr.w	r3, r3, #16
 80002ce:	6193      	str	r3, [r2, #24]
 80002d0:	4b1b      	ldr	r3, [pc, #108]	; (8000340 <MX_GPIO_Init+0x90>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	f003 0310 	and.w	r3, r3, #16
 80002d8:	60fb      	str	r3, [r7, #12]
 80002da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002dc:	4b18      	ldr	r3, [pc, #96]	; (8000340 <MX_GPIO_Init+0x90>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a17      	ldr	r2, [pc, #92]	; (8000340 <MX_GPIO_Init+0x90>)
 80002e2:	f043 0304 	orr.w	r3, r3, #4
 80002e6:	6193      	str	r3, [r2, #24]
 80002e8:	4b15      	ldr	r3, [pc, #84]	; (8000340 <MX_GPIO_Init+0x90>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	f003 0304 	and.w	r3, r3, #4
 80002f0:	60bb      	str	r3, [r7, #8]
 80002f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f4:	4b12      	ldr	r3, [pc, #72]	; (8000340 <MX_GPIO_Init+0x90>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4a11      	ldr	r2, [pc, #68]	; (8000340 <MX_GPIO_Init+0x90>)
 80002fa:	f043 0308 	orr.w	r3, r3, #8
 80002fe:	6193      	str	r3, [r2, #24]
 8000300:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <MX_GPIO_Init+0x90>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	f003 0308 	and.w	r3, r3, #8
 8000308:	607b      	str	r3, [r7, #4]
 800030a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800030c:	2200      	movs	r2, #0
 800030e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000312:	480c      	ldr	r0, [pc, #48]	; (8000344 <MX_GPIO_Init+0x94>)
 8000314:	f000 fcbc 	bl	8000c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000318:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800031c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031e:	2301      	movs	r3, #1
 8000320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000322:	2300      	movs	r3, #0
 8000324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000326:	2302      	movs	r3, #2
 8000328:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800032a:	f107 0310 	add.w	r3, r7, #16
 800032e:	4619      	mov	r1, r3
 8000330:	4804      	ldr	r0, [pc, #16]	; (8000344 <MX_GPIO_Init+0x94>)
 8000332:	f000 fb29 	bl	8000988 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000336:	bf00      	nop
 8000338:	3720      	adds	r7, #32
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40021000 	.word	0x40021000
 8000344:	40011000 	.word	0x40011000

08000348 <fTaskBlinkShort>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_fTaskBlinkShort */
void fTaskBlinkShort(void *argument)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b086      	sub	sp, #24
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	const uint32_t xFrequency = 500; // 500 миллисекунд
 8000350:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000354:	617b      	str	r3, [r7, #20]
	    const TickType_t xTransitionTime = pdMS_TO_TICKS(6000); // 6 секунд
 8000356:	f241 7370 	movw	r3, #6000	; 0x1770
 800035a:	613b      	str	r3, [r7, #16]

	    TickType_t xLastWakeTime = xTaskGetTickCount();
 800035c:	f002 fef2 	bl	8003144 <xTaskGetTickCount>
 8000360:	4603      	mov	r3, r0
 8000362:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Выполнение действий для состояния 1
 8000364:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000368:	480e      	ldr	r0, [pc, #56]	; (80003a4 <fTaskBlinkShort+0x5c>)
 800036a:	f000 fca9 	bl	8000cc0 <HAL_GPIO_TogglePin>
	         osDelay(xFrequency); // Задержка в тиках времени FreeRTOS
 800036e:	6978      	ldr	r0, [r7, #20]
 8000370:	f001 fc86 	bl	8001c80 <osDelay>
	         if ((xTaskGetTickCount() - xLastWakeTime) >= xTransitionTime) {
 8000374:	f002 fee6 	bl	8003144 <xTaskGetTickCount>
 8000378:	4603      	mov	r3, r0
 800037a:	461a      	mov	r2, r3
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	1ad3      	subs	r3, r2, r3
 8000380:	693a      	ldr	r2, [r7, #16]
 8000382:	429a      	cmp	r2, r3
 8000384:	d8ee      	bhi.n	8000364 <fTaskBlinkShort+0x1c>
	             // Отправка сообщения о переходе в состояние 1
	        	 State_t currentState = STATE_2;
 8000386:	2301      	movs	r3, #1
 8000388:	72fb      	strb	r3, [r7, #11]
	             xQueueSend(stateQueueHandle, &currentState, portMAX_DELAY);
 800038a:	4b07      	ldr	r3, [pc, #28]	; (80003a8 <fTaskBlinkShort+0x60>)
 800038c:	6818      	ldr	r0, [r3, #0]
 800038e:	f107 010b 	add.w	r1, r7, #11
 8000392:	2300      	movs	r3, #0
 8000394:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000398:	f001 ff48 	bl	800222c <xQueueGenericSend>
	             vTaskDelete(NULL); // Завершение задачи
 800039c:	2000      	movs	r0, #0
 800039e:	f002 fcbf 	bl	8002d20 <vTaskDelete>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Выполнение действий для состояния 1
 80003a2:	e7df      	b.n	8000364 <fTaskBlinkShort+0x1c>
 80003a4:	40011000 	.word	0x40011000
 80003a8:	20000c0c 	.word	0x20000c0c

080003ac <fTaskBlinkLong>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTaskBlinkLong */
void fTaskBlinkLong(void *argument)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b086      	sub	sp, #24
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTaskBlinkLong */
	const uint32_t xFrequency = 1000; // 500 миллисекунд
 80003b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003b8:	617b      	str	r3, [r7, #20]
	    const TickType_t xTransitionTime = pdMS_TO_TICKS(6000); // 6 секунд
 80003ba:	f241 7370 	movw	r3, #6000	; 0x1770
 80003be:	613b      	str	r3, [r7, #16]

	    TickType_t xLastWakeTime = xTaskGetTickCount();
 80003c0:	f002 fec0 	bl	8003144 <xTaskGetTickCount>
 80003c4:	4603      	mov	r3, r0
 80003c6:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Выполнение действий для состояния 1
 80003c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003cc:	480e      	ldr	r0, [pc, #56]	; (8000408 <fTaskBlinkLong+0x5c>)
 80003ce:	f000 fc77 	bl	8000cc0 <HAL_GPIO_TogglePin>
	         osDelay(xFrequency); // Задержка в тиках времени FreeRTOS
 80003d2:	6978      	ldr	r0, [r7, #20]
 80003d4:	f001 fc54 	bl	8001c80 <osDelay>
	         if ((xTaskGetTickCount() - xLastWakeTime) >= xTransitionTime) {
 80003d8:	f002 feb4 	bl	8003144 <xTaskGetTickCount>
 80003dc:	4603      	mov	r3, r0
 80003de:	461a      	mov	r2, r3
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	1ad3      	subs	r3, r2, r3
 80003e4:	693a      	ldr	r2, [r7, #16]
 80003e6:	429a      	cmp	r2, r3
 80003e8:	d8ee      	bhi.n	80003c8 <fTaskBlinkLong+0x1c>
	             // Отправка сообщения о переходе в состояние 1
	        	 State_t currentState = STATE_1;
 80003ea:	2300      	movs	r3, #0
 80003ec:	72fb      	strb	r3, [r7, #11]
	        	 	             xQueueSend(stateQueueHandle, &currentState, portMAX_DELAY);
 80003ee:	4b07      	ldr	r3, [pc, #28]	; (800040c <fTaskBlinkLong+0x60>)
 80003f0:	6818      	ldr	r0, [r3, #0]
 80003f2:	f107 010b 	add.w	r1, r7, #11
 80003f6:	2300      	movs	r3, #0
 80003f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80003fc:	f001 ff16 	bl	800222c <xQueueGenericSend>
	             vTaskDelete(NULL); // Завершение задачи
 8000400:	2000      	movs	r0, #0
 8000402:	f002 fc8d 	bl	8002d20 <vTaskDelete>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Выполнение действий для состояния 1
 8000406:	e7df      	b.n	80003c8 <fTaskBlinkLong+0x1c>
 8000408:	40011000 	.word	0x40011000
 800040c:	20000c0c 	.word	0x20000c0c

08000410 <fTaskRealBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTaskRealBlink */
void fTaskRealBlink(void *argument)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b086      	sub	sp, #24
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTaskRealBlink */
	const uint32_t xFrequency = 100; // 500 миллисекунд
 8000418:	2364      	movs	r3, #100	; 0x64
 800041a:	617b      	str	r3, [r7, #20]
	    const TickType_t xTransitionTime = pdMS_TO_TICKS(2000); // 6 секунд
 800041c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000420:	613b      	str	r3, [r7, #16]

	    TickType_t xLastWakeTime = xTaskGetTickCount();
 8000422:	f002 fe8f 	bl	8003144 <xTaskGetTickCount>
 8000426:	4603      	mov	r3, r0
 8000428:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Выполнение действий для состояния 1
 800042a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800042e:	4809      	ldr	r0, [pc, #36]	; (8000454 <fTaskRealBlink+0x44>)
 8000430:	f000 fc46 	bl	8000cc0 <HAL_GPIO_TogglePin>
	         osDelay(xFrequency); // Задержка в тиках времени FreeRTOS
 8000434:	6978      	ldr	r0, [r7, #20]
 8000436:	f001 fc23 	bl	8001c80 <osDelay>
	         if ((xTaskGetTickCount() - xLastWakeTime) >= xTransitionTime) {
 800043a:	f002 fe83 	bl	8003144 <xTaskGetTickCount>
 800043e:	4603      	mov	r3, r0
 8000440:	461a      	mov	r2, r3
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	1ad3      	subs	r3, r2, r3
 8000446:	693a      	ldr	r2, [r7, #16]
 8000448:	429a      	cmp	r2, r3
 800044a:	d8ee      	bhi.n	800042a <fTaskRealBlink+0x1a>
	             // Отправка сообщения о переходе в состояние 1
	            // xQueueSend(stateQueueHandle, &STATE_1, portMAX_DELAY);
	             vTaskDelete(NULL); // Завершение задачи
 800044c:	2000      	movs	r0, #0
 800044e:	f002 fc67 	bl	8002d20 <vTaskDelete>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Выполнение действий для состояния 1
 8000452:	e7ea      	b.n	800042a <fTaskRealBlink+0x1a>
 8000454:	40011000 	.word	0x40011000

08000458 <fTaskHandlerFSM>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTaskHandlerFSM */
void fTaskHandlerFSM(void *argument)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTaskHandlerFSM */
	TaskDelayBlinkHandle = osThreadNew(fTaskDelayBlink, NULL, &TaskDelayBlink_attributes);
 8000460:	4a20      	ldr	r2, [pc, #128]	; (80004e4 <fTaskHandlerFSM+0x8c>)
 8000462:	2100      	movs	r1, #0
 8000464:	4820      	ldr	r0, [pc, #128]	; (80004e8 <fTaskHandlerFSM+0x90>)
 8000466:	f001 fb21 	bl	8001aac <osThreadNew>
 800046a:	4603      	mov	r3, r0
 800046c:	4a1f      	ldr	r2, [pc, #124]	; (80004ec <fTaskHandlerFSM+0x94>)
 800046e:	6013      	str	r3, [r2, #0]
	TaskBlinkShortHandle = osThreadNew(fTaskBlinkShort, NULL, &TaskBlinkShort_attributes);
 8000470:	4a1f      	ldr	r2, [pc, #124]	; (80004f0 <fTaskHandlerFSM+0x98>)
 8000472:	2100      	movs	r1, #0
 8000474:	481f      	ldr	r0, [pc, #124]	; (80004f4 <fTaskHandlerFSM+0x9c>)
 8000476:	f001 fb19 	bl	8001aac <osThreadNew>
 800047a:	4603      	mov	r3, r0
 800047c:	4a1e      	ldr	r2, [pc, #120]	; (80004f8 <fTaskHandlerFSM+0xa0>)
 800047e:	6013      	str	r3, [r2, #0]
	State_t currentState = STATE_1;
 8000480:	2300      	movs	r3, #0
 8000482:	73fb      	strb	r3, [r7, #15]
	//xTaskCreate(fTaskDelayBlink, "StateDelayBlink", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
  /* Infinite loop */
  for(;;)
  {
	  // Ожидание сообщения о переходе в другое состояние
	         xQueueReceive(stateQueueHandle, &currentState, portMAX_DELAY);
 8000484:	4b1d      	ldr	r3, [pc, #116]	; (80004fc <fTaskHandlerFSM+0xa4>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	f107 010f 	add.w	r1, r7, #15
 800048c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000490:	4618      	mov	r0, r3
 8000492:	f002 f861 	bl	8002558 <xQueueReceive>
	                // Выбор и запуск задачи для нового состояния
	                switch (currentState) {
 8000496:	7bfb      	ldrb	r3, [r7, #15]
 8000498:	2b02      	cmp	r3, #2
 800049a:	d018      	beq.n	80004ce <fTaskHandlerFSM+0x76>
 800049c:	2b02      	cmp	r3, #2
 800049e:	dc1f      	bgt.n	80004e0 <fTaskHandlerFSM+0x88>
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d002      	beq.n	80004aa <fTaskHandlerFSM+0x52>
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d009      	beq.n	80004bc <fTaskHandlerFSM+0x64>
	                        break;
	                    case STATE_3:
	                    	TaskRealBlinkHandle = osThreadNew(fTaskRealBlink, NULL, &TaskRealBlink_attributes);
	                        break;
	                    default:
	                        break;
 80004a8:	e01a      	b.n	80004e0 <fTaskHandlerFSM+0x88>
	                    	TaskBlinkShortHandle = osThreadNew(fTaskBlinkShort, NULL, &TaskBlinkShort_attributes);
 80004aa:	4a11      	ldr	r2, [pc, #68]	; (80004f0 <fTaskHandlerFSM+0x98>)
 80004ac:	2100      	movs	r1, #0
 80004ae:	4811      	ldr	r0, [pc, #68]	; (80004f4 <fTaskHandlerFSM+0x9c>)
 80004b0:	f001 fafc 	bl	8001aac <osThreadNew>
 80004b4:	4603      	mov	r3, r0
 80004b6:	4a10      	ldr	r2, [pc, #64]	; (80004f8 <fTaskHandlerFSM+0xa0>)
 80004b8:	6013      	str	r3, [r2, #0]
	                        break;
 80004ba:	e012      	b.n	80004e2 <fTaskHandlerFSM+0x8a>
	                    	TaskBlinkLongHandle = osThreadNew(fTaskBlinkLong, NULL, &TaskBlinkLong_attributes);
 80004bc:	4a10      	ldr	r2, [pc, #64]	; (8000500 <fTaskHandlerFSM+0xa8>)
 80004be:	2100      	movs	r1, #0
 80004c0:	4810      	ldr	r0, [pc, #64]	; (8000504 <fTaskHandlerFSM+0xac>)
 80004c2:	f001 faf3 	bl	8001aac <osThreadNew>
 80004c6:	4603      	mov	r3, r0
 80004c8:	4a0f      	ldr	r2, [pc, #60]	; (8000508 <fTaskHandlerFSM+0xb0>)
 80004ca:	6013      	str	r3, [r2, #0]
	                        break;
 80004cc:	e009      	b.n	80004e2 <fTaskHandlerFSM+0x8a>
	                    	TaskRealBlinkHandle = osThreadNew(fTaskRealBlink, NULL, &TaskRealBlink_attributes);
 80004ce:	4a0f      	ldr	r2, [pc, #60]	; (800050c <fTaskHandlerFSM+0xb4>)
 80004d0:	2100      	movs	r1, #0
 80004d2:	480f      	ldr	r0, [pc, #60]	; (8000510 <fTaskHandlerFSM+0xb8>)
 80004d4:	f001 faea 	bl	8001aac <osThreadNew>
 80004d8:	4603      	mov	r3, r0
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <fTaskHandlerFSM+0xbc>)
 80004dc:	6013      	str	r3, [r2, #0]
	                        break;
 80004de:	e000      	b.n	80004e2 <fTaskHandlerFSM+0x8a>
	                        break;
 80004e0:	bf00      	nop
	         xQueueReceive(stateQueueHandle, &currentState, portMAX_DELAY);
 80004e2:	e7cf      	b.n	8000484 <fTaskHandlerFSM+0x2c>
 80004e4:	080048bc 	.word	0x080048bc
 80004e8:	08000519 	.word	0x08000519
 80004ec:	200009ac 	.word	0x200009ac
 80004f0:	0800482c 	.word	0x0800482c
 80004f4:	08000349 	.word	0x08000349
 80004f8:	2000002c 	.word	0x2000002c
 80004fc:	20000c0c 	.word	0x20000c0c
 8000500:	08004850 	.word	0x08004850
 8000504:	080003ad 	.word	0x080003ad
 8000508:	2000028c 	.word	0x2000028c
 800050c:	08004874 	.word	0x08004874
 8000510:	08000411 	.word	0x08000411
 8000514:	200004ec 	.word	0x200004ec

08000518 <fTaskDelayBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTaskDelayBlink */
void fTaskDelayBlink(void *argument)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTaskDelayBlink */
    const uint32_t xTaskDelayTime = 8000; // 8 секунд
 8000520:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8000524:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	 osDelay(xTaskDelayTime);
 8000526:	68f8      	ldr	r0, [r7, #12]
 8000528:	f001 fbaa 	bl	8001c80 <osDelay>
	 State_t currentState = STATE_3;
 800052c:	2302      	movs	r3, #2
 800052e:	72fb      	strb	r3, [r7, #11]
	 	             xQueueSend(stateQueueHandle, &currentState, portMAX_DELAY);
 8000530:	4b04      	ldr	r3, [pc, #16]	; (8000544 <fTaskDelayBlink+0x2c>)
 8000532:	6818      	ldr	r0, [r3, #0]
 8000534:	f107 010b 	add.w	r1, r7, #11
 8000538:	2300      	movs	r3, #0
 800053a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800053e:	f001 fe75 	bl	800222c <xQueueGenericSend>
  {
 8000542:	e7f0      	b.n	8000526 <fTaskDelayBlink+0xe>
 8000544:	20000c0c 	.word	0x20000c0c

08000548 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a04      	ldr	r2, [pc, #16]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d101      	bne.n	800055e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800055a:	f000 f919 	bl	8000790 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40012c00 	.word	0x40012c00

0800056c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000570:	b672      	cpsid	i
}
 8000572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000574:	e7fe      	b.n	8000574 <Error_Handler+0x8>
	...

08000578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800057e:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <HAL_MspInit+0x68>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	4a17      	ldr	r2, [pc, #92]	; (80005e0 <HAL_MspInit+0x68>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6193      	str	r3, [r2, #24]
 800058a:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <HAL_MspInit+0x68>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000596:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <HAL_MspInit+0x68>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	4a11      	ldr	r2, [pc, #68]	; (80005e0 <HAL_MspInit+0x68>)
 800059c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a0:	61d3      	str	r3, [r2, #28]
 80005a2:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <HAL_MspInit+0x68>)
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005ae:	2200      	movs	r2, #0
 80005b0:	210f      	movs	r1, #15
 80005b2:	f06f 0001 	mvn.w	r0, #1
 80005b6:	f000 f9bc 	bl	8000932 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ba:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <HAL_MspInit+0x6c>)
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	4a04      	ldr	r2, [pc, #16]	; (80005e4 <HAL_MspInit+0x6c>)
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d6:	bf00      	nop
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40021000 	.word	0x40021000
 80005e4:	40010000 	.word	0x40010000

080005e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08c      	sub	sp, #48	; 0x30
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80005f0:	2300      	movs	r3, #0
 80005f2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80005f4:	2300      	movs	r3, #0
 80005f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80005f8:	2300      	movs	r3, #0
 80005fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80005fe:	4b2e      	ldr	r3, [pc, #184]	; (80006b8 <HAL_InitTick+0xd0>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	4a2d      	ldr	r2, [pc, #180]	; (80006b8 <HAL_InitTick+0xd0>)
 8000604:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000608:	6193      	str	r3, [r2, #24]
 800060a:	4b2b      	ldr	r3, [pc, #172]	; (80006b8 <HAL_InitTick+0xd0>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000616:	f107 020c 	add.w	r2, r7, #12
 800061a:	f107 0310 	add.w	r3, r7, #16
 800061e:	4611      	mov	r1, r2
 8000620:	4618      	mov	r0, r3
 8000622:	f000 ff45 	bl	80014b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000626:	f000 ff2f 	bl	8001488 <HAL_RCC_GetPCLK2Freq>
 800062a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800062c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800062e:	4a23      	ldr	r2, [pc, #140]	; (80006bc <HAL_InitTick+0xd4>)
 8000630:	fba2 2303 	umull	r2, r3, r2, r3
 8000634:	0c9b      	lsrs	r3, r3, #18
 8000636:	3b01      	subs	r3, #1
 8000638:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800063a:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <HAL_InitTick+0xd8>)
 800063c:	4a21      	ldr	r2, [pc, #132]	; (80006c4 <HAL_InitTick+0xdc>)
 800063e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000640:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <HAL_InitTick+0xd8>)
 8000642:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000646:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000648:	4a1d      	ldr	r2, [pc, #116]	; (80006c0 <HAL_InitTick+0xd8>)
 800064a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800064e:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <HAL_InitTick+0xd8>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000654:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <HAL_InitTick+0xd8>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800065a:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <HAL_InitTick+0xd8>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000660:	4817      	ldr	r0, [pc, #92]	; (80006c0 <HAL_InitTick+0xd8>)
 8000662:	f000 ff73 	bl	800154c <HAL_TIM_Base_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800066c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000670:	2b00      	cmp	r3, #0
 8000672:	d11b      	bne.n	80006ac <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000674:	4812      	ldr	r0, [pc, #72]	; (80006c0 <HAL_InitTick+0xd8>)
 8000676:	f000 ffc1 	bl	80015fc <HAL_TIM_Base_Start_IT>
 800067a:	4603      	mov	r3, r0
 800067c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000680:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000684:	2b00      	cmp	r3, #0
 8000686:	d111      	bne.n	80006ac <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000688:	2019      	movs	r0, #25
 800068a:	f000 f96e 	bl	800096a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b0f      	cmp	r3, #15
 8000692:	d808      	bhi.n	80006a6 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000694:	2200      	movs	r2, #0
 8000696:	6879      	ldr	r1, [r7, #4]
 8000698:	2019      	movs	r0, #25
 800069a:	f000 f94a 	bl	8000932 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800069e:	4a0a      	ldr	r2, [pc, #40]	; (80006c8 <HAL_InitTick+0xe0>)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	e002      	b.n	80006ac <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80006a6:	2301      	movs	r3, #1
 80006a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80006ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3730      	adds	r7, #48	; 0x30
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40021000 	.word	0x40021000
 80006bc:	431bde83 	.word	0x431bde83
 80006c0:	20000c80 	.word	0x20000c80
 80006c4:	40012c00 	.word	0x40012c00
 80006c8:	20000004 	.word	0x20000004

080006cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006d0:	e7fe      	b.n	80006d0 <NMI_Handler+0x4>

080006d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <HardFault_Handler+0x4>

080006d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <MemManage_Handler+0x4>

080006de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <BusFault_Handler+0x4>

080006e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <UsageFault_Handler+0x4>

080006ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr
	...

080006f8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80006fc:	4802      	ldr	r0, [pc, #8]	; (8000708 <TIM1_UP_IRQHandler+0x10>)
 80006fe:	f000 ffcf 	bl	80016a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000c80 	.word	0x20000c80

0800070c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr

08000718 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000718:	f7ff fff8 	bl	800070c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800071c:	480b      	ldr	r0, [pc, #44]	; (800074c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800071e:	490c      	ldr	r1, [pc, #48]	; (8000750 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000720:	4a0c      	ldr	r2, [pc, #48]	; (8000754 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000724:	e002      	b.n	800072c <LoopCopyDataInit>

08000726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072a:	3304      	adds	r3, #4

0800072c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800072c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000730:	d3f9      	bcc.n	8000726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000732:	4a09      	ldr	r2, [pc, #36]	; (8000758 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000734:	4c09      	ldr	r4, [pc, #36]	; (800075c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000738:	e001      	b.n	800073e <LoopFillZerobss>

0800073a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800073c:	3204      	adds	r2, #4

0800073e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000740:	d3fb      	bcc.n	800073a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000742:	f003 fffb 	bl	800473c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000746:	f7ff fd03 	bl	8000150 <main>
  bx lr
 800074a:	4770      	bx	lr
  ldr r0, =_sdata
 800074c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000750:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000754:	0800492c 	.word	0x0800492c
  ldr r2, =_sbss
 8000758:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800075c:	20002614 	.word	0x20002614

08000760 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000760:	e7fe      	b.n	8000760 <ADC1_2_IRQHandler>
	...

08000764 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <HAL_Init+0x28>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a07      	ldr	r2, [pc, #28]	; (800078c <HAL_Init+0x28>)
 800076e:	f043 0310 	orr.w	r3, r3, #16
 8000772:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000774:	2003      	movs	r0, #3
 8000776:	f000 f8d1 	bl	800091c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800077a:	200f      	movs	r0, #15
 800077c:	f7ff ff34 	bl	80005e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000780:	f7ff fefa 	bl	8000578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40022000 	.word	0x40022000

08000790 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <HAL_IncTick+0x1c>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	461a      	mov	r2, r3
 800079a:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <HAL_IncTick+0x20>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4413      	add	r3, r2
 80007a0:	4a03      	ldr	r2, [pc, #12]	; (80007b0 <HAL_IncTick+0x20>)
 80007a2:	6013      	str	r3, [r2, #0]
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr
 80007ac:	20000008 	.word	0x20000008
 80007b0:	20000cc8 	.word	0x20000cc8

080007b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  return uwTick;
 80007b8:	4b02      	ldr	r3, [pc, #8]	; (80007c4 <HAL_GetTick+0x10>)
 80007ba:	681b      	ldr	r3, [r3, #0]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	20000cc8 	.word	0x20000cc8

080007c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f003 0307 	and.w	r3, r3, #7
 80007d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <__NVIC_SetPriorityGrouping+0x44>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007de:	68ba      	ldr	r2, [r7, #8]
 80007e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007e4:	4013      	ands	r3, r2
 80007e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007fa:	4a04      	ldr	r2, [pc, #16]	; (800080c <__NVIC_SetPriorityGrouping+0x44>)
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	60d3      	str	r3, [r2, #12]
}
 8000800:	bf00      	nop
 8000802:	3714      	adds	r7, #20
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000814:	4b04      	ldr	r3, [pc, #16]	; (8000828 <__NVIC_GetPriorityGrouping+0x18>)
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	0a1b      	lsrs	r3, r3, #8
 800081a:	f003 0307 	and.w	r3, r3, #7
}
 800081e:	4618      	mov	r0, r3
 8000820:	46bd      	mov	sp, r7
 8000822:	bc80      	pop	{r7}
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083a:	2b00      	cmp	r3, #0
 800083c:	db0b      	blt.n	8000856 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	f003 021f 	and.w	r2, r3, #31
 8000844:	4906      	ldr	r1, [pc, #24]	; (8000860 <__NVIC_EnableIRQ+0x34>)
 8000846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084a:	095b      	lsrs	r3, r3, #5
 800084c:	2001      	movs	r0, #1
 800084e:	fa00 f202 	lsl.w	r2, r0, r2
 8000852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr
 8000860:	e000e100 	.word	0xe000e100

08000864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	6039      	str	r1, [r7, #0]
 800086e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000874:	2b00      	cmp	r3, #0
 8000876:	db0a      	blt.n	800088e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	b2da      	uxtb	r2, r3
 800087c:	490c      	ldr	r1, [pc, #48]	; (80008b0 <__NVIC_SetPriority+0x4c>)
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	0112      	lsls	r2, r2, #4
 8000884:	b2d2      	uxtb	r2, r2
 8000886:	440b      	add	r3, r1
 8000888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800088c:	e00a      	b.n	80008a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4908      	ldr	r1, [pc, #32]	; (80008b4 <__NVIC_SetPriority+0x50>)
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 030f 	and.w	r3, r3, #15
 800089a:	3b04      	subs	r3, #4
 800089c:	0112      	lsls	r2, r2, #4
 800089e:	b2d2      	uxtb	r2, r2
 80008a0:	440b      	add	r3, r1
 80008a2:	761a      	strb	r2, [r3, #24]
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	e000e100 	.word	0xe000e100
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b089      	sub	sp, #36	; 0x24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	f003 0307 	and.w	r3, r3, #7
 80008ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	f1c3 0307 	rsb	r3, r3, #7
 80008d2:	2b04      	cmp	r3, #4
 80008d4:	bf28      	it	cs
 80008d6:	2304      	movcs	r3, #4
 80008d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	3304      	adds	r3, #4
 80008de:	2b06      	cmp	r3, #6
 80008e0:	d902      	bls.n	80008e8 <NVIC_EncodePriority+0x30>
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	3b03      	subs	r3, #3
 80008e6:	e000      	b.n	80008ea <NVIC_EncodePriority+0x32>
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	43da      	mvns	r2, r3
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	401a      	ands	r2, r3
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000900:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	fa01 f303 	lsl.w	r3, r1, r3
 800090a:	43d9      	mvns	r1, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000910:	4313      	orrs	r3, r2
         );
}
 8000912:	4618      	mov	r0, r3
 8000914:	3724      	adds	r7, #36	; 0x24
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr

0800091c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff ff4f 	bl	80007c8 <__NVIC_SetPriorityGrouping>
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000932:	b580      	push	{r7, lr}
 8000934:	b086      	sub	sp, #24
 8000936:	af00      	add	r7, sp, #0
 8000938:	4603      	mov	r3, r0
 800093a:	60b9      	str	r1, [r7, #8]
 800093c:	607a      	str	r2, [r7, #4]
 800093e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000944:	f7ff ff64 	bl	8000810 <__NVIC_GetPriorityGrouping>
 8000948:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	68b9      	ldr	r1, [r7, #8]
 800094e:	6978      	ldr	r0, [r7, #20]
 8000950:	f7ff ffb2 	bl	80008b8 <NVIC_EncodePriority>
 8000954:	4602      	mov	r2, r0
 8000956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800095a:	4611      	mov	r1, r2
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff ff81 	bl	8000864 <__NVIC_SetPriority>
}
 8000962:	bf00      	nop
 8000964:	3718      	adds	r7, #24
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
 8000970:	4603      	mov	r3, r0
 8000972:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ff57 	bl	800082c <__NVIC_EnableIRQ>
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000988:	b480      	push	{r7}
 800098a:	b08b      	sub	sp, #44	; 0x2c
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000996:	2300      	movs	r3, #0
 8000998:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800099a:	e169      	b.n	8000c70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800099c:	2201      	movs	r2, #1
 800099e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a0:	fa02 f303 	lsl.w	r3, r2, r3
 80009a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	69fa      	ldr	r2, [r7, #28]
 80009ac:	4013      	ands	r3, r2
 80009ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009b0:	69ba      	ldr	r2, [r7, #24]
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	f040 8158 	bne.w	8000c6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	4a9a      	ldr	r2, [pc, #616]	; (8000c28 <HAL_GPIO_Init+0x2a0>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d05e      	beq.n	8000a82 <HAL_GPIO_Init+0xfa>
 80009c4:	4a98      	ldr	r2, [pc, #608]	; (8000c28 <HAL_GPIO_Init+0x2a0>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d875      	bhi.n	8000ab6 <HAL_GPIO_Init+0x12e>
 80009ca:	4a98      	ldr	r2, [pc, #608]	; (8000c2c <HAL_GPIO_Init+0x2a4>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d058      	beq.n	8000a82 <HAL_GPIO_Init+0xfa>
 80009d0:	4a96      	ldr	r2, [pc, #600]	; (8000c2c <HAL_GPIO_Init+0x2a4>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d86f      	bhi.n	8000ab6 <HAL_GPIO_Init+0x12e>
 80009d6:	4a96      	ldr	r2, [pc, #600]	; (8000c30 <HAL_GPIO_Init+0x2a8>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d052      	beq.n	8000a82 <HAL_GPIO_Init+0xfa>
 80009dc:	4a94      	ldr	r2, [pc, #592]	; (8000c30 <HAL_GPIO_Init+0x2a8>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d869      	bhi.n	8000ab6 <HAL_GPIO_Init+0x12e>
 80009e2:	4a94      	ldr	r2, [pc, #592]	; (8000c34 <HAL_GPIO_Init+0x2ac>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d04c      	beq.n	8000a82 <HAL_GPIO_Init+0xfa>
 80009e8:	4a92      	ldr	r2, [pc, #584]	; (8000c34 <HAL_GPIO_Init+0x2ac>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d863      	bhi.n	8000ab6 <HAL_GPIO_Init+0x12e>
 80009ee:	4a92      	ldr	r2, [pc, #584]	; (8000c38 <HAL_GPIO_Init+0x2b0>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d046      	beq.n	8000a82 <HAL_GPIO_Init+0xfa>
 80009f4:	4a90      	ldr	r2, [pc, #576]	; (8000c38 <HAL_GPIO_Init+0x2b0>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d85d      	bhi.n	8000ab6 <HAL_GPIO_Init+0x12e>
 80009fa:	2b12      	cmp	r3, #18
 80009fc:	d82a      	bhi.n	8000a54 <HAL_GPIO_Init+0xcc>
 80009fe:	2b12      	cmp	r3, #18
 8000a00:	d859      	bhi.n	8000ab6 <HAL_GPIO_Init+0x12e>
 8000a02:	a201      	add	r2, pc, #4	; (adr r2, 8000a08 <HAL_GPIO_Init+0x80>)
 8000a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a08:	08000a83 	.word	0x08000a83
 8000a0c:	08000a5d 	.word	0x08000a5d
 8000a10:	08000a6f 	.word	0x08000a6f
 8000a14:	08000ab1 	.word	0x08000ab1
 8000a18:	08000ab7 	.word	0x08000ab7
 8000a1c:	08000ab7 	.word	0x08000ab7
 8000a20:	08000ab7 	.word	0x08000ab7
 8000a24:	08000ab7 	.word	0x08000ab7
 8000a28:	08000ab7 	.word	0x08000ab7
 8000a2c:	08000ab7 	.word	0x08000ab7
 8000a30:	08000ab7 	.word	0x08000ab7
 8000a34:	08000ab7 	.word	0x08000ab7
 8000a38:	08000ab7 	.word	0x08000ab7
 8000a3c:	08000ab7 	.word	0x08000ab7
 8000a40:	08000ab7 	.word	0x08000ab7
 8000a44:	08000ab7 	.word	0x08000ab7
 8000a48:	08000ab7 	.word	0x08000ab7
 8000a4c:	08000a65 	.word	0x08000a65
 8000a50:	08000a79 	.word	0x08000a79
 8000a54:	4a79      	ldr	r2, [pc, #484]	; (8000c3c <HAL_GPIO_Init+0x2b4>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d013      	beq.n	8000a82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a5a:	e02c      	b.n	8000ab6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	623b      	str	r3, [r7, #32]
          break;
 8000a62:	e029      	b.n	8000ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	3304      	adds	r3, #4
 8000a6a:	623b      	str	r3, [r7, #32]
          break;
 8000a6c:	e024      	b.n	8000ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	68db      	ldr	r3, [r3, #12]
 8000a72:	3308      	adds	r3, #8
 8000a74:	623b      	str	r3, [r7, #32]
          break;
 8000a76:	e01f      	b.n	8000ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	330c      	adds	r3, #12
 8000a7e:	623b      	str	r3, [r7, #32]
          break;
 8000a80:	e01a      	b.n	8000ab8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d102      	bne.n	8000a90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a8a:	2304      	movs	r3, #4
 8000a8c:	623b      	str	r3, [r7, #32]
          break;
 8000a8e:	e013      	b.n	8000ab8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d105      	bne.n	8000aa4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a98:	2308      	movs	r3, #8
 8000a9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	69fa      	ldr	r2, [r7, #28]
 8000aa0:	611a      	str	r2, [r3, #16]
          break;
 8000aa2:	e009      	b.n	8000ab8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000aa4:	2308      	movs	r3, #8
 8000aa6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	69fa      	ldr	r2, [r7, #28]
 8000aac:	615a      	str	r2, [r3, #20]
          break;
 8000aae:	e003      	b.n	8000ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]
          break;
 8000ab4:	e000      	b.n	8000ab8 <HAL_GPIO_Init+0x130>
          break;
 8000ab6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	2bff      	cmp	r3, #255	; 0xff
 8000abc:	d801      	bhi.n	8000ac2 <HAL_GPIO_Init+0x13a>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	e001      	b.n	8000ac6 <HAL_GPIO_Init+0x13e>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	2bff      	cmp	r3, #255	; 0xff
 8000acc:	d802      	bhi.n	8000ad4 <HAL_GPIO_Init+0x14c>
 8000ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	e002      	b.n	8000ada <HAL_GPIO_Init+0x152>
 8000ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad6:	3b08      	subs	r3, #8
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	210f      	movs	r1, #15
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	401a      	ands	r2, r3
 8000aec:	6a39      	ldr	r1, [r7, #32]
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	fa01 f303 	lsl.w	r3, r1, r3
 8000af4:	431a      	orrs	r2, r3
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	f000 80b1 	beq.w	8000c6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b08:	4b4d      	ldr	r3, [pc, #308]	; (8000c40 <HAL_GPIO_Init+0x2b8>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	4a4c      	ldr	r2, [pc, #304]	; (8000c40 <HAL_GPIO_Init+0x2b8>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	6193      	str	r3, [r2, #24]
 8000b14:	4b4a      	ldr	r3, [pc, #296]	; (8000c40 <HAL_GPIO_Init+0x2b8>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b20:	4a48      	ldr	r2, [pc, #288]	; (8000c44 <HAL_GPIO_Init+0x2bc>)
 8000b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b24:	089b      	lsrs	r3, r3, #2
 8000b26:	3302      	adds	r3, #2
 8000b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b30:	f003 0303 	and.w	r3, r3, #3
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	220f      	movs	r2, #15
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	4013      	ands	r3, r2
 8000b42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a40      	ldr	r2, [pc, #256]	; (8000c48 <HAL_GPIO_Init+0x2c0>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d013      	beq.n	8000b74 <HAL_GPIO_Init+0x1ec>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a3f      	ldr	r2, [pc, #252]	; (8000c4c <HAL_GPIO_Init+0x2c4>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d00d      	beq.n	8000b70 <HAL_GPIO_Init+0x1e8>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a3e      	ldr	r2, [pc, #248]	; (8000c50 <HAL_GPIO_Init+0x2c8>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d007      	beq.n	8000b6c <HAL_GPIO_Init+0x1e4>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a3d      	ldr	r2, [pc, #244]	; (8000c54 <HAL_GPIO_Init+0x2cc>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d101      	bne.n	8000b68 <HAL_GPIO_Init+0x1e0>
 8000b64:	2303      	movs	r3, #3
 8000b66:	e006      	b.n	8000b76 <HAL_GPIO_Init+0x1ee>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	e004      	b.n	8000b76 <HAL_GPIO_Init+0x1ee>
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	e002      	b.n	8000b76 <HAL_GPIO_Init+0x1ee>
 8000b70:	2301      	movs	r3, #1
 8000b72:	e000      	b.n	8000b76 <HAL_GPIO_Init+0x1ee>
 8000b74:	2300      	movs	r3, #0
 8000b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b78:	f002 0203 	and.w	r2, r2, #3
 8000b7c:	0092      	lsls	r2, r2, #2
 8000b7e:	4093      	lsls	r3, r2
 8000b80:	68fa      	ldr	r2, [r7, #12]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b86:	492f      	ldr	r1, [pc, #188]	; (8000c44 <HAL_GPIO_Init+0x2bc>)
 8000b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8a:	089b      	lsrs	r3, r3, #2
 8000b8c:	3302      	adds	r3, #2
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d006      	beq.n	8000bae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ba0:	4b2d      	ldr	r3, [pc, #180]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000ba2:	689a      	ldr	r2, [r3, #8]
 8000ba4:	492c      	ldr	r1, [pc, #176]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	608b      	str	r3, [r1, #8]
 8000bac:	e006      	b.n	8000bbc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bae:	4b2a      	ldr	r3, [pc, #168]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000bb0:	689a      	ldr	r2, [r3, #8]
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	4928      	ldr	r1, [pc, #160]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000bb8:	4013      	ands	r3, r2
 8000bba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d006      	beq.n	8000bd6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bc8:	4b23      	ldr	r3, [pc, #140]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000bca:	68da      	ldr	r2, [r3, #12]
 8000bcc:	4922      	ldr	r1, [pc, #136]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	60cb      	str	r3, [r1, #12]
 8000bd4:	e006      	b.n	8000be4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bd6:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000bd8:	68da      	ldr	r2, [r3, #12]
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	491e      	ldr	r1, [pc, #120]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000be0:	4013      	ands	r3, r2
 8000be2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d006      	beq.n	8000bfe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bf0:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000bf2:	685a      	ldr	r2, [r3, #4]
 8000bf4:	4918      	ldr	r1, [pc, #96]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	604b      	str	r3, [r1, #4]
 8000bfc:	e006      	b.n	8000c0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bfe:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000c00:	685a      	ldr	r2, [r3, #4]
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	43db      	mvns	r3, r3
 8000c06:	4914      	ldr	r1, [pc, #80]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000c08:	4013      	ands	r3, r2
 8000c0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d021      	beq.n	8000c5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c18:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	490e      	ldr	r1, [pc, #56]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	600b      	str	r3, [r1, #0]
 8000c24:	e021      	b.n	8000c6a <HAL_GPIO_Init+0x2e2>
 8000c26:	bf00      	nop
 8000c28:	10320000 	.word	0x10320000
 8000c2c:	10310000 	.word	0x10310000
 8000c30:	10220000 	.word	0x10220000
 8000c34:	10210000 	.word	0x10210000
 8000c38:	10120000 	.word	0x10120000
 8000c3c:	10110000 	.word	0x10110000
 8000c40:	40021000 	.word	0x40021000
 8000c44:	40010000 	.word	0x40010000
 8000c48:	40010800 	.word	0x40010800
 8000c4c:	40010c00 	.word	0x40010c00
 8000c50:	40011000 	.word	0x40011000
 8000c54:	40011400 	.word	0x40011400
 8000c58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <HAL_GPIO_Init+0x304>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	43db      	mvns	r3, r3
 8000c64:	4909      	ldr	r1, [pc, #36]	; (8000c8c <HAL_GPIO_Init+0x304>)
 8000c66:	4013      	ands	r3, r2
 8000c68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c76:	fa22 f303 	lsr.w	r3, r2, r3
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f47f ae8e 	bne.w	800099c <HAL_GPIO_Init+0x14>
  }
}
 8000c80:	bf00      	nop
 8000c82:	bf00      	nop
 8000c84:	372c      	adds	r7, #44	; 0x2c
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr
 8000c8c:	40010400 	.word	0x40010400

08000c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	460b      	mov	r3, r1
 8000c9a:	807b      	strh	r3, [r7, #2]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ca0:	787b      	ldrb	r3, [r7, #1]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d003      	beq.n	8000cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ca6:	887a      	ldrh	r2, [r7, #2]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cac:	e003      	b.n	8000cb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cae:	887b      	ldrh	r3, [r7, #2]
 8000cb0:	041a      	lsls	r2, r3, #16
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	611a      	str	r2, [r3, #16]
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr

08000cc0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000cd2:	887a      	ldrh	r2, [r7, #2]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	041a      	lsls	r2, r3, #16
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	43d9      	mvns	r1, r3
 8000cde:	887b      	ldrh	r3, [r7, #2]
 8000ce0:	400b      	ands	r3, r1
 8000ce2:	431a      	orrs	r2, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	611a      	str	r2, [r3, #16]
}
 8000ce8:	bf00      	nop
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr
	...

08000cf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d101      	bne.n	8000d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e272      	b.n	80011ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f000 8087 	beq.w	8000e22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d14:	4b92      	ldr	r3, [pc, #584]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 030c 	and.w	r3, r3, #12
 8000d1c:	2b04      	cmp	r3, #4
 8000d1e:	d00c      	beq.n	8000d3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d20:	4b8f      	ldr	r3, [pc, #572]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f003 030c 	and.w	r3, r3, #12
 8000d28:	2b08      	cmp	r3, #8
 8000d2a:	d112      	bne.n	8000d52 <HAL_RCC_OscConfig+0x5e>
 8000d2c:	4b8c      	ldr	r3, [pc, #560]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d38:	d10b      	bne.n	8000d52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d3a:	4b89      	ldr	r3, [pc, #548]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d06c      	beq.n	8000e20 <HAL_RCC_OscConfig+0x12c>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d168      	bne.n	8000e20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e24c      	b.n	80011ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d5a:	d106      	bne.n	8000d6a <HAL_RCC_OscConfig+0x76>
 8000d5c:	4b80      	ldr	r3, [pc, #512]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a7f      	ldr	r2, [pc, #508]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d66:	6013      	str	r3, [r2, #0]
 8000d68:	e02e      	b.n	8000dc8 <HAL_RCC_OscConfig+0xd4>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d10c      	bne.n	8000d8c <HAL_RCC_OscConfig+0x98>
 8000d72:	4b7b      	ldr	r3, [pc, #492]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a7a      	ldr	r2, [pc, #488]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d7c:	6013      	str	r3, [r2, #0]
 8000d7e:	4b78      	ldr	r3, [pc, #480]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a77      	ldr	r2, [pc, #476]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d88:	6013      	str	r3, [r2, #0]
 8000d8a:	e01d      	b.n	8000dc8 <HAL_RCC_OscConfig+0xd4>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d94:	d10c      	bne.n	8000db0 <HAL_RCC_OscConfig+0xbc>
 8000d96:	4b72      	ldr	r3, [pc, #456]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a71      	ldr	r2, [pc, #452]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	4b6f      	ldr	r3, [pc, #444]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a6e      	ldr	r2, [pc, #440]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dac:	6013      	str	r3, [r2, #0]
 8000dae:	e00b      	b.n	8000dc8 <HAL_RCC_OscConfig+0xd4>
 8000db0:	4b6b      	ldr	r3, [pc, #428]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a6a      	ldr	r2, [pc, #424]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dba:	6013      	str	r3, [r2, #0]
 8000dbc:	4b68      	ldr	r3, [pc, #416]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a67      	ldr	r2, [pc, #412]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d013      	beq.n	8000df8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd0:	f7ff fcf0 	bl	80007b4 <HAL_GetTick>
 8000dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dd6:	e008      	b.n	8000dea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dd8:	f7ff fcec 	bl	80007b4 <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	2b64      	cmp	r3, #100	; 0x64
 8000de4:	d901      	bls.n	8000dea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000de6:	2303      	movs	r3, #3
 8000de8:	e200      	b.n	80011ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dea:	4b5d      	ldr	r3, [pc, #372]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d0f0      	beq.n	8000dd8 <HAL_RCC_OscConfig+0xe4>
 8000df6:	e014      	b.n	8000e22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df8:	f7ff fcdc 	bl	80007b4 <HAL_GetTick>
 8000dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dfe:	e008      	b.n	8000e12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e00:	f7ff fcd8 	bl	80007b4 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	2b64      	cmp	r3, #100	; 0x64
 8000e0c:	d901      	bls.n	8000e12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e1ec      	b.n	80011ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e12:	4b53      	ldr	r3, [pc, #332]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d1f0      	bne.n	8000e00 <HAL_RCC_OscConfig+0x10c>
 8000e1e:	e000      	b.n	8000e22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d063      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e2e:	4b4c      	ldr	r3, [pc, #304]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 030c 	and.w	r3, r3, #12
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d00b      	beq.n	8000e52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e3a:	4b49      	ldr	r3, [pc, #292]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f003 030c 	and.w	r3, r3, #12
 8000e42:	2b08      	cmp	r3, #8
 8000e44:	d11c      	bne.n	8000e80 <HAL_RCC_OscConfig+0x18c>
 8000e46:	4b46      	ldr	r3, [pc, #280]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d116      	bne.n	8000e80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e52:	4b43      	ldr	r3, [pc, #268]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d005      	beq.n	8000e6a <HAL_RCC_OscConfig+0x176>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	691b      	ldr	r3, [r3, #16]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d001      	beq.n	8000e6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e1c0      	b.n	80011ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e6a:	4b3d      	ldr	r3, [pc, #244]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	4939      	ldr	r1, [pc, #228]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e7e:	e03a      	b.n	8000ef6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	691b      	ldr	r3, [r3, #16]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d020      	beq.n	8000eca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e88:	4b36      	ldr	r3, [pc, #216]	; (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e8e:	f7ff fc91 	bl	80007b4 <HAL_GetTick>
 8000e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e94:	e008      	b.n	8000ea8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e96:	f7ff fc8d 	bl	80007b4 <HAL_GetTick>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d901      	bls.n	8000ea8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e1a1      	b.n	80011ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ea8:	4b2d      	ldr	r3, [pc, #180]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d0f0      	beq.n	8000e96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eb4:	4b2a      	ldr	r3, [pc, #168]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	695b      	ldr	r3, [r3, #20]
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	4927      	ldr	r1, [pc, #156]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	600b      	str	r3, [r1, #0]
 8000ec8:	e015      	b.n	8000ef6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eca:	4b26      	ldr	r3, [pc, #152]	; (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed0:	f7ff fc70 	bl	80007b4 <HAL_GetTick>
 8000ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ed6:	e008      	b.n	8000eea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ed8:	f7ff fc6c 	bl	80007b4 <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d901      	bls.n	8000eea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e180      	b.n	80011ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eea:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d1f0      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0308 	and.w	r3, r3, #8
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d03a      	beq.n	8000f78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d019      	beq.n	8000f3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f0a:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <HAL_RCC_OscConfig+0x274>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f10:	f7ff fc50 	bl	80007b4 <HAL_GetTick>
 8000f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f16:	e008      	b.n	8000f2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f18:	f7ff fc4c 	bl	80007b4 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e160      	b.n	80011ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0f0      	beq.n	8000f18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f36:	2001      	movs	r0, #1
 8000f38:	f000 faea 	bl	8001510 <RCC_Delay>
 8000f3c:	e01c      	b.n	8000f78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_RCC_OscConfig+0x274>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f44:	f7ff fc36 	bl	80007b4 <HAL_GetTick>
 8000f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f4a:	e00f      	b.n	8000f6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f4c:	f7ff fc32 	bl	80007b4 <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d908      	bls.n	8000f6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e146      	b.n	80011ec <HAL_RCC_OscConfig+0x4f8>
 8000f5e:	bf00      	nop
 8000f60:	40021000 	.word	0x40021000
 8000f64:	42420000 	.word	0x42420000
 8000f68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f6c:	4b92      	ldr	r3, [pc, #584]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8000f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1e9      	bne.n	8000f4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 0304 	and.w	r3, r3, #4
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f000 80a6 	beq.w	80010d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f86:	2300      	movs	r3, #0
 8000f88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f8a:	4b8b      	ldr	r3, [pc, #556]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d10d      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f96:	4b88      	ldr	r3, [pc, #544]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	4a87      	ldr	r2, [pc, #540]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8000f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa0:	61d3      	str	r3, [r2, #28]
 8000fa2:	4b85      	ldr	r3, [pc, #532]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb2:	4b82      	ldr	r3, [pc, #520]	; (80011bc <HAL_RCC_OscConfig+0x4c8>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d118      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fbe:	4b7f      	ldr	r3, [pc, #508]	; (80011bc <HAL_RCC_OscConfig+0x4c8>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a7e      	ldr	r2, [pc, #504]	; (80011bc <HAL_RCC_OscConfig+0x4c8>)
 8000fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fca:	f7ff fbf3 	bl	80007b4 <HAL_GetTick>
 8000fce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd0:	e008      	b.n	8000fe4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fd2:	f7ff fbef 	bl	80007b4 <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	2b64      	cmp	r3, #100	; 0x64
 8000fde:	d901      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e103      	b.n	80011ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fe4:	4b75      	ldr	r3, [pc, #468]	; (80011bc <HAL_RCC_OscConfig+0x4c8>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d0f0      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d106      	bne.n	8001006 <HAL_RCC_OscConfig+0x312>
 8000ff8:	4b6f      	ldr	r3, [pc, #444]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8000ffa:	6a1b      	ldr	r3, [r3, #32]
 8000ffc:	4a6e      	ldr	r2, [pc, #440]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	6213      	str	r3, [r2, #32]
 8001004:	e02d      	b.n	8001062 <HAL_RCC_OscConfig+0x36e>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10c      	bne.n	8001028 <HAL_RCC_OscConfig+0x334>
 800100e:	4b6a      	ldr	r3, [pc, #424]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8001010:	6a1b      	ldr	r3, [r3, #32]
 8001012:	4a69      	ldr	r2, [pc, #420]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8001014:	f023 0301 	bic.w	r3, r3, #1
 8001018:	6213      	str	r3, [r2, #32]
 800101a:	4b67      	ldr	r3, [pc, #412]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	4a66      	ldr	r2, [pc, #408]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8001020:	f023 0304 	bic.w	r3, r3, #4
 8001024:	6213      	str	r3, [r2, #32]
 8001026:	e01c      	b.n	8001062 <HAL_RCC_OscConfig+0x36e>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	2b05      	cmp	r3, #5
 800102e:	d10c      	bne.n	800104a <HAL_RCC_OscConfig+0x356>
 8001030:	4b61      	ldr	r3, [pc, #388]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	4a60      	ldr	r2, [pc, #384]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8001036:	f043 0304 	orr.w	r3, r3, #4
 800103a:	6213      	str	r3, [r2, #32]
 800103c:	4b5e      	ldr	r3, [pc, #376]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	4a5d      	ldr	r2, [pc, #372]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	6213      	str	r3, [r2, #32]
 8001048:	e00b      	b.n	8001062 <HAL_RCC_OscConfig+0x36e>
 800104a:	4b5b      	ldr	r3, [pc, #364]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 800104c:	6a1b      	ldr	r3, [r3, #32]
 800104e:	4a5a      	ldr	r2, [pc, #360]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8001050:	f023 0301 	bic.w	r3, r3, #1
 8001054:	6213      	str	r3, [r2, #32]
 8001056:	4b58      	ldr	r3, [pc, #352]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8001058:	6a1b      	ldr	r3, [r3, #32]
 800105a:	4a57      	ldr	r2, [pc, #348]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 800105c:	f023 0304 	bic.w	r3, r3, #4
 8001060:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d015      	beq.n	8001096 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800106a:	f7ff fba3 	bl	80007b4 <HAL_GetTick>
 800106e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001070:	e00a      	b.n	8001088 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001072:	f7ff fb9f 	bl	80007b4 <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001080:	4293      	cmp	r3, r2
 8001082:	d901      	bls.n	8001088 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001084:	2303      	movs	r3, #3
 8001086:	e0b1      	b.n	80011ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001088:	4b4b      	ldr	r3, [pc, #300]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 800108a:	6a1b      	ldr	r3, [r3, #32]
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	2b00      	cmp	r3, #0
 8001092:	d0ee      	beq.n	8001072 <HAL_RCC_OscConfig+0x37e>
 8001094:	e014      	b.n	80010c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001096:	f7ff fb8d 	bl	80007b4 <HAL_GetTick>
 800109a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800109c:	e00a      	b.n	80010b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800109e:	f7ff fb89 	bl	80007b4 <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d901      	bls.n	80010b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	e09b      	b.n	80011ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010b4:	4b40      	ldr	r3, [pc, #256]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 80010b6:	6a1b      	ldr	r3, [r3, #32]
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d1ee      	bne.n	800109e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010c0:	7dfb      	ldrb	r3, [r7, #23]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d105      	bne.n	80010d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010c6:	4b3c      	ldr	r3, [pc, #240]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	4a3b      	ldr	r2, [pc, #236]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 80010cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 8087 	beq.w	80011ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010dc:	4b36      	ldr	r3, [pc, #216]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 030c 	and.w	r3, r3, #12
 80010e4:	2b08      	cmp	r3, #8
 80010e6:	d061      	beq.n	80011ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	69db      	ldr	r3, [r3, #28]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d146      	bne.n	800117e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010f0:	4b33      	ldr	r3, [pc, #204]	; (80011c0 <HAL_RCC_OscConfig+0x4cc>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f6:	f7ff fb5d 	bl	80007b4 <HAL_GetTick>
 80010fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010fc:	e008      	b.n	8001110 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010fe:	f7ff fb59 	bl	80007b4 <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e06d      	b.n	80011ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001110:	4b29      	ldr	r3, [pc, #164]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1f0      	bne.n	80010fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a1b      	ldr	r3, [r3, #32]
 8001120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001124:	d108      	bne.n	8001138 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001126:	4b24      	ldr	r3, [pc, #144]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	4921      	ldr	r1, [pc, #132]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8001134:	4313      	orrs	r3, r2
 8001136:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001138:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a19      	ldr	r1, [r3, #32]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001148:	430b      	orrs	r3, r1
 800114a:	491b      	ldr	r1, [pc, #108]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 800114c:	4313      	orrs	r3, r2
 800114e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001150:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <HAL_RCC_OscConfig+0x4cc>)
 8001152:	2201      	movs	r2, #1
 8001154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001156:	f7ff fb2d 	bl	80007b4 <HAL_GetTick>
 800115a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800115c:	e008      	b.n	8001170 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800115e:	f7ff fb29 	bl	80007b4 <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e03d      	b.n	80011ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d0f0      	beq.n	800115e <HAL_RCC_OscConfig+0x46a>
 800117c:	e035      	b.n	80011ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <HAL_RCC_OscConfig+0x4cc>)
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001184:	f7ff fb16 	bl	80007b4 <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800118c:	f7ff fb12 	bl	80007b4 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b02      	cmp	r3, #2
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e026      	b.n	80011ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_RCC_OscConfig+0x4c4>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1f0      	bne.n	800118c <HAL_RCC_OscConfig+0x498>
 80011aa:	e01e      	b.n	80011ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d107      	bne.n	80011c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e019      	b.n	80011ec <HAL_RCC_OscConfig+0x4f8>
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40007000 	.word	0x40007000
 80011c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011c4:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <HAL_RCC_OscConfig+0x500>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a1b      	ldr	r3, [r3, #32]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d106      	bne.n	80011e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d001      	beq.n	80011ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40021000 	.word	0x40021000

080011f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d101      	bne.n	800120c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e0d0      	b.n	80013ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800120c:	4b6a      	ldr	r3, [pc, #424]	; (80013b8 <HAL_RCC_ClockConfig+0x1c0>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0307 	and.w	r3, r3, #7
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	429a      	cmp	r2, r3
 8001218:	d910      	bls.n	800123c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800121a:	4b67      	ldr	r3, [pc, #412]	; (80013b8 <HAL_RCC_ClockConfig+0x1c0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f023 0207 	bic.w	r2, r3, #7
 8001222:	4965      	ldr	r1, [pc, #404]	; (80013b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	4313      	orrs	r3, r2
 8001228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800122a:	4b63      	ldr	r3, [pc, #396]	; (80013b8 <HAL_RCC_ClockConfig+0x1c0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	429a      	cmp	r2, r3
 8001236:	d001      	beq.n	800123c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e0b8      	b.n	80013ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d020      	beq.n	800128a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	2b00      	cmp	r3, #0
 8001252:	d005      	beq.n	8001260 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001254:	4b59      	ldr	r3, [pc, #356]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	4a58      	ldr	r2, [pc, #352]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 800125a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800125e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0308 	and.w	r3, r3, #8
 8001268:	2b00      	cmp	r3, #0
 800126a:	d005      	beq.n	8001278 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800126c:	4b53      	ldr	r3, [pc, #332]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	4a52      	ldr	r2, [pc, #328]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 8001272:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001276:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001278:	4b50      	ldr	r3, [pc, #320]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	494d      	ldr	r1, [pc, #308]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 8001286:	4313      	orrs	r3, r2
 8001288:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	2b00      	cmp	r3, #0
 8001294:	d040      	beq.n	8001318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d107      	bne.n	80012ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129e:	4b47      	ldr	r3, [pc, #284]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d115      	bne.n	80012d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e07f      	b.n	80013ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d107      	bne.n	80012c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012b6:	4b41      	ldr	r3, [pc, #260]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d109      	bne.n	80012d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e073      	b.n	80013ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c6:	4b3d      	ldr	r3, [pc, #244]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e06b      	b.n	80013ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012d6:	4b39      	ldr	r3, [pc, #228]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f023 0203 	bic.w	r2, r3, #3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	4936      	ldr	r1, [pc, #216]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012e8:	f7ff fa64 	bl	80007b4 <HAL_GetTick>
 80012ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ee:	e00a      	b.n	8001306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012f0:	f7ff fa60 	bl	80007b4 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80012fe:	4293      	cmp	r3, r2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e053      	b.n	80013ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001306:	4b2d      	ldr	r3, [pc, #180]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 020c 	and.w	r2, r3, #12
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	429a      	cmp	r2, r3
 8001316:	d1eb      	bne.n	80012f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001318:	4b27      	ldr	r3, [pc, #156]	; (80013b8 <HAL_RCC_ClockConfig+0x1c0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	429a      	cmp	r2, r3
 8001324:	d210      	bcs.n	8001348 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001326:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f023 0207 	bic.w	r2, r3, #7
 800132e:	4922      	ldr	r1, [pc, #136]	; (80013b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	4313      	orrs	r3, r2
 8001334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001336:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	429a      	cmp	r2, r3
 8001342:	d001      	beq.n	8001348 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e032      	b.n	80013ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	2b00      	cmp	r3, #0
 8001352:	d008      	beq.n	8001366 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001354:	4b19      	ldr	r3, [pc, #100]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	4916      	ldr	r1, [pc, #88]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 8001362:	4313      	orrs	r3, r2
 8001364:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	2b00      	cmp	r3, #0
 8001370:	d009      	beq.n	8001386 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001372:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	490e      	ldr	r1, [pc, #56]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 8001382:	4313      	orrs	r3, r2
 8001384:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001386:	f000 f821 	bl	80013cc <HAL_RCC_GetSysClockFreq>
 800138a:	4602      	mov	r2, r0
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	091b      	lsrs	r3, r3, #4
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	490a      	ldr	r1, [pc, #40]	; (80013c0 <HAL_RCC_ClockConfig+0x1c8>)
 8001398:	5ccb      	ldrb	r3, [r1, r3]
 800139a:	fa22 f303 	lsr.w	r3, r2, r3
 800139e:	4a09      	ldr	r2, [pc, #36]	; (80013c4 <HAL_RCC_ClockConfig+0x1cc>)
 80013a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <HAL_RCC_ClockConfig+0x1d0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f91e 	bl	80005e8 <HAL_InitTick>

  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40022000 	.word	0x40022000
 80013bc:	40021000 	.word	0x40021000
 80013c0:	080048f8 	.word	0x080048f8
 80013c4:	20000000 	.word	0x20000000
 80013c8:	20000004 	.word	0x20000004

080013cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b087      	sub	sp, #28
 80013d0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013e6:	4b1e      	ldr	r3, [pc, #120]	; (8001460 <HAL_RCC_GetSysClockFreq+0x94>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f003 030c 	and.w	r3, r3, #12
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	d002      	beq.n	80013fc <HAL_RCC_GetSysClockFreq+0x30>
 80013f6:	2b08      	cmp	r3, #8
 80013f8:	d003      	beq.n	8001402 <HAL_RCC_GetSysClockFreq+0x36>
 80013fa:	e027      	b.n	800144c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013fc:	4b19      	ldr	r3, [pc, #100]	; (8001464 <HAL_RCC_GetSysClockFreq+0x98>)
 80013fe:	613b      	str	r3, [r7, #16]
      break;
 8001400:	e027      	b.n	8001452 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	0c9b      	lsrs	r3, r3, #18
 8001406:	f003 030f 	and.w	r3, r3, #15
 800140a:	4a17      	ldr	r2, [pc, #92]	; (8001468 <HAL_RCC_GetSysClockFreq+0x9c>)
 800140c:	5cd3      	ldrb	r3, [r2, r3]
 800140e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d010      	beq.n	800143c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800141a:	4b11      	ldr	r3, [pc, #68]	; (8001460 <HAL_RCC_GetSysClockFreq+0x94>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	0c5b      	lsrs	r3, r3, #17
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	4a11      	ldr	r2, [pc, #68]	; (800146c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001426:	5cd3      	ldrb	r3, [r2, r3]
 8001428:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a0d      	ldr	r2, [pc, #52]	; (8001464 <HAL_RCC_GetSysClockFreq+0x98>)
 800142e:	fb03 f202 	mul.w	r2, r3, r2
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	fbb2 f3f3 	udiv	r3, r2, r3
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	e004      	b.n	8001446 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a0c      	ldr	r2, [pc, #48]	; (8001470 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001440:	fb02 f303 	mul.w	r3, r2, r3
 8001444:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	613b      	str	r3, [r7, #16]
      break;
 800144a:	e002      	b.n	8001452 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_RCC_GetSysClockFreq+0x98>)
 800144e:	613b      	str	r3, [r7, #16]
      break;
 8001450:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001452:	693b      	ldr	r3, [r7, #16]
}
 8001454:	4618      	mov	r0, r3
 8001456:	371c      	adds	r7, #28
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40021000 	.word	0x40021000
 8001464:	007a1200 	.word	0x007a1200
 8001468:	08004910 	.word	0x08004910
 800146c:	08004920 	.word	0x08004920
 8001470:	003d0900 	.word	0x003d0900

08001474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001478:	4b02      	ldr	r3, [pc, #8]	; (8001484 <HAL_RCC_GetHCLKFreq+0x10>)
 800147a:	681b      	ldr	r3, [r3, #0]
}
 800147c:	4618      	mov	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr
 8001484:	20000000 	.word	0x20000000

08001488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800148c:	f7ff fff2 	bl	8001474 <HAL_RCC_GetHCLKFreq>
 8001490:	4602      	mov	r2, r0
 8001492:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	0adb      	lsrs	r3, r3, #11
 8001498:	f003 0307 	and.w	r3, r3, #7
 800149c:	4903      	ldr	r1, [pc, #12]	; (80014ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800149e:	5ccb      	ldrb	r3, [r1, r3]
 80014a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40021000 	.word	0x40021000
 80014ac:	08004908 	.word	0x08004908

080014b0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	220f      	movs	r2, #15
 80014be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <HAL_RCC_GetClockConfig+0x58>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 0203 	and.w	r2, r3, #3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014cc:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <HAL_RCC_GetClockConfig+0x58>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014d8:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <HAL_RCC_GetClockConfig+0x58>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <HAL_RCC_GetClockConfig+0x58>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	08db      	lsrs	r3, r3, #3
 80014ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_RCC_GetClockConfig+0x5c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0207 	and.w	r2, r3, #7
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr
 8001508:	40021000 	.word	0x40021000
 800150c:	40022000 	.word	0x40022000

08001510 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001518:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <RCC_Delay+0x34>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <RCC_Delay+0x38>)
 800151e:	fba2 2303 	umull	r2, r3, r2, r3
 8001522:	0a5b      	lsrs	r3, r3, #9
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	fb02 f303 	mul.w	r3, r2, r3
 800152a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800152c:	bf00      	nop
  }
  while (Delay --);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	1e5a      	subs	r2, r3, #1
 8001532:	60fa      	str	r2, [r7, #12]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1f9      	bne.n	800152c <RCC_Delay+0x1c>
}
 8001538:	bf00      	nop
 800153a:	bf00      	nop
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	20000000 	.word	0x20000000
 8001548:	10624dd3 	.word	0x10624dd3

0800154c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e041      	b.n	80015e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d106      	bne.n	8001578 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 f839 	bl	80015ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2202      	movs	r2, #2
 800157c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3304      	adds	r3, #4
 8001588:	4619      	mov	r1, r3
 800158a:	4610      	mov	r0, r2
 800158c:	f000 f9b4 	bl	80018f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b01      	cmp	r3, #1
 800160e:	d001      	beq.n	8001614 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e03a      	b.n	800168a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2202      	movs	r2, #2
 8001618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	68da      	ldr	r2, [r3, #12]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 0201 	orr.w	r2, r2, #1
 800162a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a18      	ldr	r2, [pc, #96]	; (8001694 <HAL_TIM_Base_Start_IT+0x98>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d00e      	beq.n	8001654 <HAL_TIM_Base_Start_IT+0x58>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800163e:	d009      	beq.n	8001654 <HAL_TIM_Base_Start_IT+0x58>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a14      	ldr	r2, [pc, #80]	; (8001698 <HAL_TIM_Base_Start_IT+0x9c>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d004      	beq.n	8001654 <HAL_TIM_Base_Start_IT+0x58>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a13      	ldr	r2, [pc, #76]	; (800169c <HAL_TIM_Base_Start_IT+0xa0>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d111      	bne.n	8001678 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2b06      	cmp	r3, #6
 8001664:	d010      	beq.n	8001688 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f042 0201 	orr.w	r2, r2, #1
 8001674:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001676:	e007      	b.n	8001688 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 0201 	orr.w	r2, r2, #1
 8001686:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr
 8001694:	40012c00 	.word	0x40012c00
 8001698:	40000400 	.word	0x40000400
 800169c:	40000800 	.word	0x40000800

080016a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d122      	bne.n	80016fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d11b      	bne.n	80016fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f06f 0202 	mvn.w	r2, #2
 80016cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2201      	movs	r2, #1
 80016d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 f8ed 	bl	80018c2 <HAL_TIM_IC_CaptureCallback>
 80016e8:	e005      	b.n	80016f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 f8e0 	bl	80018b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 f8ef 	bl	80018d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	2b04      	cmp	r3, #4
 8001708:	d122      	bne.n	8001750 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	2b04      	cmp	r3, #4
 8001716:	d11b      	bne.n	8001750 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f06f 0204 	mvn.w	r2, #4
 8001720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2202      	movs	r2, #2
 8001726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 f8c3 	bl	80018c2 <HAL_TIM_IC_CaptureCallback>
 800173c:	e005      	b.n	800174a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 f8b6 	bl	80018b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 f8c5 	bl	80018d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b08      	cmp	r3, #8
 800175c:	d122      	bne.n	80017a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	f003 0308 	and.w	r3, r3, #8
 8001768:	2b08      	cmp	r3, #8
 800176a:	d11b      	bne.n	80017a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f06f 0208 	mvn.w	r2, #8
 8001774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2204      	movs	r2, #4
 800177a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f899 	bl	80018c2 <HAL_TIM_IC_CaptureCallback>
 8001790:	e005      	b.n	800179e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 f88c 	bl	80018b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 f89b 	bl	80018d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	f003 0310 	and.w	r3, r3, #16
 80017ae:	2b10      	cmp	r3, #16
 80017b0:	d122      	bne.n	80017f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	f003 0310 	and.w	r3, r3, #16
 80017bc:	2b10      	cmp	r3, #16
 80017be:	d11b      	bne.n	80017f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f06f 0210 	mvn.w	r2, #16
 80017c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2208      	movs	r2, #8
 80017ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 f86f 	bl	80018c2 <HAL_TIM_IC_CaptureCallback>
 80017e4:	e005      	b.n	80017f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 f862 	bl	80018b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 f871 	bl	80018d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b01      	cmp	r3, #1
 8001804:	d10e      	bne.n	8001824 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	2b01      	cmp	r3, #1
 8001812:	d107      	bne.n	8001824 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f06f 0201 	mvn.w	r2, #1
 800181c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7fe fe92 	bl	8000548 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800182e:	2b80      	cmp	r3, #128	; 0x80
 8001830:	d10e      	bne.n	8001850 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800183c:	2b80      	cmp	r3, #128	; 0x80
 800183e:	d107      	bne.n	8001850 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f8bf 	bl	80019ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800185a:	2b40      	cmp	r3, #64	; 0x40
 800185c:	d10e      	bne.n	800187c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001868:	2b40      	cmp	r3, #64	; 0x40
 800186a:	d107      	bne.n	800187c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f835 	bl	80018e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	f003 0320 	and.w	r3, r3, #32
 8001886:	2b20      	cmp	r3, #32
 8001888:	d10e      	bne.n	80018a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	f003 0320 	and.w	r3, r3, #32
 8001894:	2b20      	cmp	r3, #32
 8001896:	d107      	bne.n	80018a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f06f 0220 	mvn.w	r2, #32
 80018a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f88a 	bl	80019bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr

080018c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr

080018e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a29      	ldr	r2, [pc, #164]	; (80019b0 <TIM_Base_SetConfig+0xb8>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d00b      	beq.n	8001928 <TIM_Base_SetConfig+0x30>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001916:	d007      	beq.n	8001928 <TIM_Base_SetConfig+0x30>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a26      	ldr	r2, [pc, #152]	; (80019b4 <TIM_Base_SetConfig+0xbc>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d003      	beq.n	8001928 <TIM_Base_SetConfig+0x30>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a25      	ldr	r2, [pc, #148]	; (80019b8 <TIM_Base_SetConfig+0xc0>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d108      	bne.n	800193a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800192e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	68fa      	ldr	r2, [r7, #12]
 8001936:	4313      	orrs	r3, r2
 8001938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a1c      	ldr	r2, [pc, #112]	; (80019b0 <TIM_Base_SetConfig+0xb8>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d00b      	beq.n	800195a <TIM_Base_SetConfig+0x62>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001948:	d007      	beq.n	800195a <TIM_Base_SetConfig+0x62>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a19      	ldr	r2, [pc, #100]	; (80019b4 <TIM_Base_SetConfig+0xbc>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d003      	beq.n	800195a <TIM_Base_SetConfig+0x62>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a18      	ldr	r2, [pc, #96]	; (80019b8 <TIM_Base_SetConfig+0xc0>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d108      	bne.n	800196c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	4313      	orrs	r3, r2
 800196a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	4313      	orrs	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a07      	ldr	r2, [pc, #28]	; (80019b0 <TIM_Base_SetConfig+0xb8>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d103      	bne.n	80019a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	691a      	ldr	r2, [r3, #16]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	615a      	str	r2, [r3, #20]
}
 80019a6:	bf00      	nop
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr
 80019b0:	40012c00 	.word	0x40012c00
 80019b4:	40000400 	.word	0x40000400
 80019b8:	40000800 	.word	0x40000800

080019bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr

080019ce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr

080019e0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019e6:	f3ef 8305 	mrs	r3, IPSR
 80019ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80019ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10f      	bne.n	8001a12 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019f2:	f3ef 8310 	mrs	r3, PRIMASK
 80019f6:	607b      	str	r3, [r7, #4]
  return(result);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d109      	bne.n	8001a12 <osKernelInitialize+0x32>
 80019fe:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <osKernelInitialize+0x60>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d109      	bne.n	8001a1a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001a06:	f3ef 8311 	mrs	r3, BASEPRI
 8001a0a:	603b      	str	r3, [r7, #0]
  return(result);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001a12:	f06f 0305 	mvn.w	r3, #5
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	e00c      	b.n	8001a34 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <osKernelInitialize+0x60>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d105      	bne.n	8001a2e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001a22:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <osKernelInitialize+0x60>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	e002      	b.n	8001a34 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001a2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a32:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001a34:	68fb      	ldr	r3, [r7, #12]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr
 8001a40:	20000ccc 	.word	0x20000ccc

08001a44 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a4a:	f3ef 8305 	mrs	r3, IPSR
 8001a4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001a50:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10f      	bne.n	8001a76 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a56:	f3ef 8310 	mrs	r3, PRIMASK
 8001a5a:	607b      	str	r3, [r7, #4]
  return(result);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d109      	bne.n	8001a76 <osKernelStart+0x32>
 8001a62:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <osKernelStart+0x64>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d109      	bne.n	8001a7e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001a6a:	f3ef 8311 	mrs	r3, BASEPRI
 8001a6e:	603b      	str	r3, [r7, #0]
  return(result);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <osKernelStart+0x3a>
    stat = osErrorISR;
 8001a76:	f06f 0305 	mvn.w	r3, #5
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	e00e      	b.n	8001a9c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <osKernelStart+0x64>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d107      	bne.n	8001a96 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001a86:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <osKernelStart+0x64>)
 8001a88:	2202      	movs	r2, #2
 8001a8a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001a8c:	f001 fa48 	bl	8002f20 <vTaskStartScheduler>
      stat = osOK;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	e002      	b.n	8001a9c <osKernelStart+0x58>
    } else {
      stat = osError;
 8001a96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a9a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000ccc 	.word	0x20000ccc

08001aac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b092      	sub	sp, #72	; 0x48
 8001ab0:	af04      	add	r7, sp, #16
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001abc:	f3ef 8305 	mrs	r3, IPSR
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f040 8094 	bne.w	8001bf2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001aca:	f3ef 8310 	mrs	r3, PRIMASK
 8001ace:	623b      	str	r3, [r7, #32]
  return(result);
 8001ad0:	6a3b      	ldr	r3, [r7, #32]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f040 808d 	bne.w	8001bf2 <osThreadNew+0x146>
 8001ad8:	4b48      	ldr	r3, [pc, #288]	; (8001bfc <osThreadNew+0x150>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d106      	bne.n	8001aee <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ae0:	f3ef 8311 	mrs	r3, BASEPRI
 8001ae4:	61fb      	str	r3, [r7, #28]
  return(result);
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f040 8082 	bne.w	8001bf2 <osThreadNew+0x146>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d07e      	beq.n	8001bf2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001af4:	2380      	movs	r3, #128	; 0x80
 8001af6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001af8:	2318      	movs	r3, #24
 8001afa:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8001afc:	2300      	movs	r3, #0
 8001afe:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001b00:	f107 031b 	add.w	r3, r7, #27
 8001b04:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8001b06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b0a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d045      	beq.n	8001b9e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d002      	beq.n	8001b20 <osThreadNew+0x74>
        name = attr->name;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d002      	beq.n	8001b2e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d008      	beq.n	8001b46 <osThreadNew+0x9a>
 8001b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b36:	2b38      	cmp	r3, #56	; 0x38
 8001b38:	d805      	bhi.n	8001b46 <osThreadNew+0x9a>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <osThreadNew+0x9e>
        return (NULL);
 8001b46:	2300      	movs	r3, #0
 8001b48:	e054      	b.n	8001bf4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	089b      	lsrs	r3, r3, #2
 8001b58:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00e      	beq.n	8001b80 <osThreadNew+0xd4>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	2b5b      	cmp	r3, #91	; 0x5b
 8001b68:	d90a      	bls.n	8001b80 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d006      	beq.n	8001b80 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d002      	beq.n	8001b80 <osThreadNew+0xd4>
        mem = 1;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b7e:	e010      	b.n	8001ba2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10c      	bne.n	8001ba2 <osThreadNew+0xf6>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d108      	bne.n	8001ba2 <osThreadNew+0xf6>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d104      	bne.n	8001ba2 <osThreadNew+0xf6>
          mem = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b9c:	e001      	b.n	8001ba2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8001ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d110      	bne.n	8001bca <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001bb0:	9202      	str	r2, [sp, #8]
 8001bb2:	9301      	str	r3, [sp, #4]
 8001bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bbc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f000 ff16 	bl	80029f0 <xTaskCreateStatic>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	e013      	b.n	8001bf2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d110      	bne.n	8001bf2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	9301      	str	r3, [sp, #4]
 8001bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f000 ff60 	bl	8002aa8 <xTaskCreate>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d001      	beq.n	8001bf2 <osThreadNew+0x146>
          hTask = NULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001bf2:	697b      	ldr	r3, [r7, #20]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3738      	adds	r7, #56	; 0x38
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20000ccc 	.word	0x20000ccc

08001c00 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c0c:	f3ef 8305 	mrs	r3, IPSR
 8001c10:	613b      	str	r3, [r7, #16]
  return(result);
 8001c12:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10f      	bne.n	8001c38 <osThreadTerminate+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c18:	f3ef 8310 	mrs	r3, PRIMASK
 8001c1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d109      	bne.n	8001c38 <osThreadTerminate+0x38>
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <osThreadTerminate+0x7c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d109      	bne.n	8001c40 <osThreadTerminate+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001c2c:	f3ef 8311 	mrs	r3, BASEPRI
 8001c30:	60bb      	str	r3, [r7, #8]
  return(result);
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <osThreadTerminate+0x40>
    stat = osErrorISR;
 8001c38:	f06f 0305 	mvn.w	r3, #5
 8001c3c:	61fb      	str	r3, [r7, #28]
 8001c3e:	e017      	b.n	8001c70 <osThreadTerminate+0x70>
  }
  else if (hTask == NULL) {
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d103      	bne.n	8001c4e <osThreadTerminate+0x4e>
    stat = osErrorParameter;
 8001c46:	f06f 0303 	mvn.w	r3, #3
 8001c4a:	61fb      	str	r3, [r7, #28]
 8001c4c:	e010      	b.n	8001c70 <osThreadTerminate+0x70>
  }
  else {
    tstate = eTaskGetState (hTask);
 8001c4e:	69b8      	ldr	r0, [r7, #24]
 8001c50:	f001 f90c 	bl	8002e6c <eTaskGetState>
 8001c54:	4603      	mov	r3, r0
 8001c56:	75fb      	strb	r3, [r7, #23]

    if (tstate != eDeleted) {
 8001c58:	7dfb      	ldrb	r3, [r7, #23]
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d005      	beq.n	8001c6a <osThreadTerminate+0x6a>
      stat = osOK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
      vTaskDelete (hTask);
 8001c62:	69b8      	ldr	r0, [r7, #24]
 8001c64:	f001 f85c 	bl	8002d20 <vTaskDelete>
 8001c68:	e002      	b.n	8001c70 <osThreadTerminate+0x70>
    } else {
      stat = osErrorResource;
 8001c6a:	f06f 0302 	mvn.w	r3, #2
 8001c6e:	61fb      	str	r3, [r7, #28]
  }
#else
  stat = osError;
#endif

  return (stat);
 8001c70:	69fb      	ldr	r3, [r7, #28]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3720      	adds	r7, #32
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000ccc 	.word	0x20000ccc

08001c80 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c88:	f3ef 8305 	mrs	r3, IPSR
 8001c8c:	613b      	str	r3, [r7, #16]
  return(result);
 8001c8e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d10f      	bne.n	8001cb4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c94:	f3ef 8310 	mrs	r3, PRIMASK
 8001c98:	60fb      	str	r3, [r7, #12]
  return(result);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d109      	bne.n	8001cb4 <osDelay+0x34>
 8001ca0:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <osDelay+0x58>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d109      	bne.n	8001cbc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ca8:	f3ef 8311 	mrs	r3, BASEPRI
 8001cac:	60bb      	str	r3, [r7, #8]
  return(result);
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <osDelay+0x3c>
    stat = osErrorISR;
 8001cb4:	f06f 0305 	mvn.w	r3, #5
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	e007      	b.n	8001ccc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d002      	beq.n	8001ccc <osDelay+0x4c>
      vTaskDelay(ticks);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f001 f89c 	bl	8002e04 <vTaskDelay>
    }
  }

  return (stat);
 8001ccc:	697b      	ldr	r3, [r7, #20]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000ccc 	.word	0x20000ccc

08001cdc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08c      	sub	sp, #48	; 0x30
 8001ce0:	af02      	add	r7, sp, #8
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001cec:	f3ef 8305 	mrs	r3, IPSR
 8001cf0:	61bb      	str	r3, [r7, #24]
  return(result);
 8001cf2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d16f      	bne.n	8001dd8 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8001cfc:	617b      	str	r3, [r7, #20]
  return(result);
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d169      	bne.n	8001dd8 <osMessageQueueNew+0xfc>
 8001d04:	4b37      	ldr	r3, [pc, #220]	; (8001de4 <osMessageQueueNew+0x108>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d105      	bne.n	8001d18 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001d0c:	f3ef 8311 	mrs	r3, BASEPRI
 8001d10:	613b      	str	r3, [r7, #16]
  return(result);
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d15f      	bne.n	8001dd8 <osMessageQueueNew+0xfc>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d05c      	beq.n	8001dd8 <osMessageQueueNew+0xfc>
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d059      	beq.n	8001dd8 <osMessageQueueNew+0xfc>
    mem = -1;
 8001d24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d28:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d029      	beq.n	8001d84 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d012      	beq.n	8001d5e <osMessageQueueNew+0x82>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	2b4f      	cmp	r3, #79	; 0x4f
 8001d3e:	d90e      	bls.n	8001d5e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00a      	beq.n	8001d5e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	695a      	ldr	r2, [r3, #20]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	68b9      	ldr	r1, [r7, #8]
 8001d50:	fb01 f303 	mul.w	r3, r1, r3
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d302      	bcc.n	8001d5e <osMessageQueueNew+0x82>
        mem = 1;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	623b      	str	r3, [r7, #32]
 8001d5c:	e014      	b.n	8001d88 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d110      	bne.n	8001d88 <osMessageQueueNew+0xac>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10c      	bne.n	8001d88 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d108      	bne.n	8001d88 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d104      	bne.n	8001d88 <osMessageQueueNew+0xac>
          mem = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	623b      	str	r3, [r7, #32]
 8001d82:	e001      	b.n	8001d88 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001d88:	6a3b      	ldr	r3, [r7, #32]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d10b      	bne.n	8001da6 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691a      	ldr	r2, [r3, #16]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	2100      	movs	r1, #0
 8001d98:	9100      	str	r1, [sp, #0]
 8001d9a:	68b9      	ldr	r1, [r7, #8]
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f000 f96d 	bl	800207c <xQueueGenericCreateStatic>
 8001da2:	6278      	str	r0, [r7, #36]	; 0x24
 8001da4:	e008      	b.n	8001db8 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8001da6:	6a3b      	ldr	r3, [r7, #32]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d105      	bne.n	8001db8 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8001dac:	2200      	movs	r2, #0
 8001dae:	68b9      	ldr	r1, [r7, #8]
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f000 f9da 	bl	800216a <xQueueGenericCreate>
 8001db6:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00c      	beq.n	8001dd8 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <osMessageQueueNew+0xf0>
        name = attr->name;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	61fb      	str	r3, [r7, #28]
 8001dca:	e001      	b.n	8001dd0 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8001dd0:	69f9      	ldr	r1, [r7, #28]
 8001dd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001dd4:	f000 fdb0 	bl	8002938 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3728      	adds	r7, #40	; 0x28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000ccc 	.word	0x20000ccc

08001de8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4a06      	ldr	r2, [pc, #24]	; (8001e10 <vApplicationGetIdleTaskMemory+0x28>)
 8001df8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	4a05      	ldr	r2, [pc, #20]	; (8001e14 <vApplicationGetIdleTaskMemory+0x2c>)
 8001dfe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2280      	movs	r2, #128	; 0x80
 8001e04:	601a      	str	r2, [r3, #0]
}
 8001e06:	bf00      	nop
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr
 8001e10:	20000cd0 	.word	0x20000cd0
 8001e14:	20000d2c 	.word	0x20000d2c

08001e18 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4a07      	ldr	r2, [pc, #28]	; (8001e44 <vApplicationGetTimerTaskMemory+0x2c>)
 8001e28:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	4a06      	ldr	r2, [pc, #24]	; (8001e48 <vApplicationGetTimerTaskMemory+0x30>)
 8001e2e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e36:	601a      	str	r2, [r3, #0]
}
 8001e38:	bf00      	nop
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	20000f2c 	.word	0x20000f2c
 8001e48:	20000f88 	.word	0x20000f88

08001e4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f103 0208 	add.w	r2, r3, #8
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f103 0208 	add.w	r2, r3, #8
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f103 0208 	add.w	r2, r3, #8
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr

08001e8a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr

08001ea2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b085      	sub	sp, #20
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	601a      	str	r2, [r3, #0]
}
 8001ede:	bf00      	nop
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr

08001ee8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001efe:	d103      	bne.n	8001f08 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	e00c      	b.n	8001f22 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3308      	adds	r3, #8
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	e002      	b.n	8001f16 <vListInsert+0x2e>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68ba      	ldr	r2, [r7, #8]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d2f6      	bcs.n	8001f10 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	1c5a      	adds	r2, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	601a      	str	r2, [r3, #0]
}
 8001f4e:	bf00      	nop
 8001f50:	3714      	adds	r7, #20
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6892      	ldr	r2, [r2, #8]
 8001f6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6852      	ldr	r2, [r2, #4]
 8001f78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d103      	bne.n	8001f8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	1e5a      	subs	r2, r3, #1
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr
	...

08001fac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10a      	bne.n	8001fd6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fc4:	f383 8811 	msr	BASEPRI, r3
 8001fc8:	f3bf 8f6f 	isb	sy
 8001fcc:	f3bf 8f4f 	dsb	sy
 8001fd0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001fd2:	bf00      	nop
 8001fd4:	e7fe      	b.n	8001fd4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001fd6:	f002 f8d1 	bl	800417c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe2:	68f9      	ldr	r1, [r7, #12]
 8001fe4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001fe6:	fb01 f303 	mul.w	r3, r1, r3
 8001fea:	441a      	add	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002006:	3b01      	subs	r3, #1
 8002008:	68f9      	ldr	r1, [r7, #12]
 800200a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800200c:	fb01 f303 	mul.w	r3, r1, r3
 8002010:	441a      	add	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	22ff      	movs	r2, #255	; 0xff
 800201a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	22ff      	movs	r2, #255	; 0xff
 8002022:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d114      	bne.n	8002056 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d01a      	beq.n	800206a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	3310      	adds	r3, #16
 8002038:	4618      	mov	r0, r3
 800203a:	f001 f9fb 	bl	8003434 <xTaskRemoveFromEventList>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d012      	beq.n	800206a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002044:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <xQueueGenericReset+0xcc>)
 8002046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	f3bf 8f4f 	dsb	sy
 8002050:	f3bf 8f6f 	isb	sy
 8002054:	e009      	b.n	800206a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	3310      	adds	r3, #16
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fef6 	bl	8001e4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	3324      	adds	r3, #36	; 0x24
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fef1 	bl	8001e4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800206a:	f002 f8b7 	bl	80041dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800206e:	2301      	movs	r3, #1
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	e000ed04 	.word	0xe000ed04

0800207c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08e      	sub	sp, #56	; 0x38
 8002080:	af02      	add	r7, sp, #8
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
 8002088:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10a      	bne.n	80020a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002094:	f383 8811 	msr	BASEPRI, r3
 8002098:	f3bf 8f6f 	isb	sy
 800209c:	f3bf 8f4f 	dsb	sy
 80020a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80020a2:	bf00      	nop
 80020a4:	e7fe      	b.n	80020a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10a      	bne.n	80020c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80020ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b0:	f383 8811 	msr	BASEPRI, r3
 80020b4:	f3bf 8f6f 	isb	sy
 80020b8:	f3bf 8f4f 	dsb	sy
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80020be:	bf00      	nop
 80020c0:	e7fe      	b.n	80020c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d002      	beq.n	80020ce <xQueueGenericCreateStatic+0x52>
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <xQueueGenericCreateStatic+0x56>
 80020ce:	2301      	movs	r3, #1
 80020d0:	e000      	b.n	80020d4 <xQueueGenericCreateStatic+0x58>
 80020d2:	2300      	movs	r3, #0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10a      	bne.n	80020ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80020d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020dc:	f383 8811 	msr	BASEPRI, r3
 80020e0:	f3bf 8f6f 	isb	sy
 80020e4:	f3bf 8f4f 	dsb	sy
 80020e8:	623b      	str	r3, [r7, #32]
}
 80020ea:	bf00      	nop
 80020ec:	e7fe      	b.n	80020ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d102      	bne.n	80020fa <xQueueGenericCreateStatic+0x7e>
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <xQueueGenericCreateStatic+0x82>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <xQueueGenericCreateStatic+0x84>
 80020fe:	2300      	movs	r3, #0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10a      	bne.n	800211a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002108:	f383 8811 	msr	BASEPRI, r3
 800210c:	f3bf 8f6f 	isb	sy
 8002110:	f3bf 8f4f 	dsb	sy
 8002114:	61fb      	str	r3, [r7, #28]
}
 8002116:	bf00      	nop
 8002118:	e7fe      	b.n	8002118 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800211a:	2350      	movs	r3, #80	; 0x50
 800211c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	2b50      	cmp	r3, #80	; 0x50
 8002122:	d00a      	beq.n	800213a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002128:	f383 8811 	msr	BASEPRI, r3
 800212c:	f3bf 8f6f 	isb	sy
 8002130:	f3bf 8f4f 	dsb	sy
 8002134:	61bb      	str	r3, [r7, #24]
}
 8002136:	bf00      	nop
 8002138:	e7fe      	b.n	8002138 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800213e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00d      	beq.n	8002160 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800214c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	4613      	mov	r3, r2
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68b9      	ldr	r1, [r7, #8]
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 f843 	bl	80021e6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002162:	4618      	mov	r0, r3
 8002164:	3730      	adds	r7, #48	; 0x30
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800216a:	b580      	push	{r7, lr}
 800216c:	b08a      	sub	sp, #40	; 0x28
 800216e:	af02      	add	r7, sp, #8
 8002170:	60f8      	str	r0, [r7, #12]
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	4613      	mov	r3, r2
 8002176:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10a      	bne.n	8002194 <xQueueGenericCreate+0x2a>
	__asm volatile
 800217e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002182:	f383 8811 	msr	BASEPRI, r3
 8002186:	f3bf 8f6f 	isb	sy
 800218a:	f3bf 8f4f 	dsb	sy
 800218e:	613b      	str	r3, [r7, #16]
}
 8002190:	bf00      	nop
 8002192:	e7fe      	b.n	8002192 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d102      	bne.n	80021a0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800219a:	2300      	movs	r3, #0
 800219c:	61fb      	str	r3, [r7, #28]
 800219e:	e004      	b.n	80021aa <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	fb02 f303 	mul.w	r3, r2, r3
 80021a8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3350      	adds	r3, #80	; 0x50
 80021ae:	4618      	mov	r0, r3
 80021b0:	f002 f8e4 	bl	800437c <pvPortMalloc>
 80021b4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00f      	beq.n	80021dc <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	3350      	adds	r3, #80	; 0x50
 80021c0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80021ca:	79fa      	ldrb	r2, [r7, #7]
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	4613      	mov	r3, r2
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	68b9      	ldr	r1, [r7, #8]
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 f805 	bl	80021e6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80021dc:	69bb      	ldr	r3, [r7, #24]
	}
 80021de:	4618      	mov	r0, r3
 80021e0:	3720      	adds	r7, #32
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b084      	sub	sp, #16
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
 80021f2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d103      	bne.n	8002202 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	e002      	b.n	8002208 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	68ba      	ldr	r2, [r7, #8]
 8002212:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002214:	2101      	movs	r1, #1
 8002216:	69b8      	ldr	r0, [r7, #24]
 8002218:	f7ff fec8 	bl	8001fac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	78fa      	ldrb	r2, [r7, #3]
 8002220:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002224:	bf00      	nop
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08e      	sub	sp, #56	; 0x38
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
 8002238:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800223a:	2300      	movs	r3, #0
 800223c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10a      	bne.n	800225e <xQueueGenericSend+0x32>
	__asm volatile
 8002248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800224c:	f383 8811 	msr	BASEPRI, r3
 8002250:	f3bf 8f6f 	isb	sy
 8002254:	f3bf 8f4f 	dsb	sy
 8002258:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800225a:	bf00      	nop
 800225c:	e7fe      	b.n	800225c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d103      	bne.n	800226c <xQueueGenericSend+0x40>
 8002264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <xQueueGenericSend+0x44>
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <xQueueGenericSend+0x46>
 8002270:	2300      	movs	r3, #0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10a      	bne.n	800228c <xQueueGenericSend+0x60>
	__asm volatile
 8002276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800227a:	f383 8811 	msr	BASEPRI, r3
 800227e:	f3bf 8f6f 	isb	sy
 8002282:	f3bf 8f4f 	dsb	sy
 8002286:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002288:	bf00      	nop
 800228a:	e7fe      	b.n	800228a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	2b02      	cmp	r3, #2
 8002290:	d103      	bne.n	800229a <xQueueGenericSend+0x6e>
 8002292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002296:	2b01      	cmp	r3, #1
 8002298:	d101      	bne.n	800229e <xQueueGenericSend+0x72>
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <xQueueGenericSend+0x74>
 800229e:	2300      	movs	r3, #0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10a      	bne.n	80022ba <xQueueGenericSend+0x8e>
	__asm volatile
 80022a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a8:	f383 8811 	msr	BASEPRI, r3
 80022ac:	f3bf 8f6f 	isb	sy
 80022b0:	f3bf 8f4f 	dsb	sy
 80022b4:	623b      	str	r3, [r7, #32]
}
 80022b6:	bf00      	nop
 80022b8:	e7fe      	b.n	80022b8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80022ba:	f001 fa7d 	bl	80037b8 <xTaskGetSchedulerState>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d102      	bne.n	80022ca <xQueueGenericSend+0x9e>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <xQueueGenericSend+0xa2>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <xQueueGenericSend+0xa4>
 80022ce:	2300      	movs	r3, #0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10a      	bne.n	80022ea <xQueueGenericSend+0xbe>
	__asm volatile
 80022d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d8:	f383 8811 	msr	BASEPRI, r3
 80022dc:	f3bf 8f6f 	isb	sy
 80022e0:	f3bf 8f4f 	dsb	sy
 80022e4:	61fb      	str	r3, [r7, #28]
}
 80022e6:	bf00      	nop
 80022e8:	e7fe      	b.n	80022e8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80022ea:	f001 ff47 	bl	800417c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80022ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d302      	bcc.n	8002300 <xQueueGenericSend+0xd4>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d129      	bne.n	8002354 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	68b9      	ldr	r1, [r7, #8]
 8002304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002306:	f000 fa07 	bl	8002718 <prvCopyDataToQueue>
 800230a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800230c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	2b00      	cmp	r3, #0
 8002312:	d010      	beq.n	8002336 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002316:	3324      	adds	r3, #36	; 0x24
 8002318:	4618      	mov	r0, r3
 800231a:	f001 f88b 	bl	8003434 <xTaskRemoveFromEventList>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d013      	beq.n	800234c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002324:	4b3f      	ldr	r3, [pc, #252]	; (8002424 <xQueueGenericSend+0x1f8>)
 8002326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	f3bf 8f4f 	dsb	sy
 8002330:	f3bf 8f6f 	isb	sy
 8002334:	e00a      	b.n	800234c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002338:	2b00      	cmp	r3, #0
 800233a:	d007      	beq.n	800234c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800233c:	4b39      	ldr	r3, [pc, #228]	; (8002424 <xQueueGenericSend+0x1f8>)
 800233e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	f3bf 8f4f 	dsb	sy
 8002348:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800234c:	f001 ff46 	bl	80041dc <vPortExitCritical>
				return pdPASS;
 8002350:	2301      	movs	r3, #1
 8002352:	e063      	b.n	800241c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d103      	bne.n	8002362 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800235a:	f001 ff3f 	bl	80041dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800235e:	2300      	movs	r3, #0
 8002360:	e05c      	b.n	800241c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002364:	2b00      	cmp	r3, #0
 8002366:	d106      	bne.n	8002376 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002368:	f107 0314 	add.w	r3, r7, #20
 800236c:	4618      	mov	r0, r3
 800236e:	f001 f8c5 	bl	80034fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002372:	2301      	movs	r3, #1
 8002374:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002376:	f001 ff31 	bl	80041dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800237a:	f000 fe37 	bl	8002fec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800237e:	f001 fefd 	bl	800417c <vPortEnterCritical>
 8002382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002384:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002388:	b25b      	sxtb	r3, r3
 800238a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800238e:	d103      	bne.n	8002398 <xQueueGenericSend+0x16c>
 8002390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800239e:	b25b      	sxtb	r3, r3
 80023a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023a4:	d103      	bne.n	80023ae <xQueueGenericSend+0x182>
 80023a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023ae:	f001 ff15 	bl	80041dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80023b2:	1d3a      	adds	r2, r7, #4
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	4611      	mov	r1, r2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f001 f8b4 	bl	8003528 <xTaskCheckForTimeOut>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d124      	bne.n	8002410 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80023c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023c8:	f000 fa9e 	bl	8002908 <prvIsQueueFull>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d018      	beq.n	8002404 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80023d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d4:	3310      	adds	r3, #16
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	4611      	mov	r1, r2
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 ffda 	bl	8003394 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80023e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023e2:	f000 fa29 	bl	8002838 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80023e6:	f000 fe0f 	bl	8003008 <xTaskResumeAll>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f47f af7c 	bne.w	80022ea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80023f2:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <xQueueGenericSend+0x1f8>)
 80023f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	f3bf 8f4f 	dsb	sy
 80023fe:	f3bf 8f6f 	isb	sy
 8002402:	e772      	b.n	80022ea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002404:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002406:	f000 fa17 	bl	8002838 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800240a:	f000 fdfd 	bl	8003008 <xTaskResumeAll>
 800240e:	e76c      	b.n	80022ea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002412:	f000 fa11 	bl	8002838 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002416:	f000 fdf7 	bl	8003008 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800241a:	2300      	movs	r3, #0
		}
	}
}
 800241c:	4618      	mov	r0, r3
 800241e:	3738      	adds	r7, #56	; 0x38
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	e000ed04 	.word	0xe000ed04

08002428 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08e      	sub	sp, #56	; 0x38
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800243a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10a      	bne.n	8002456 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002444:	f383 8811 	msr	BASEPRI, r3
 8002448:	f3bf 8f6f 	isb	sy
 800244c:	f3bf 8f4f 	dsb	sy
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002452:	bf00      	nop
 8002454:	e7fe      	b.n	8002454 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d103      	bne.n	8002464 <xQueueGenericSendFromISR+0x3c>
 800245c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <xQueueGenericSendFromISR+0x40>
 8002464:	2301      	movs	r3, #1
 8002466:	e000      	b.n	800246a <xQueueGenericSendFromISR+0x42>
 8002468:	2300      	movs	r3, #0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10a      	bne.n	8002484 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800246e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002472:	f383 8811 	msr	BASEPRI, r3
 8002476:	f3bf 8f6f 	isb	sy
 800247a:	f3bf 8f4f 	dsb	sy
 800247e:	623b      	str	r3, [r7, #32]
}
 8002480:	bf00      	nop
 8002482:	e7fe      	b.n	8002482 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	2b02      	cmp	r3, #2
 8002488:	d103      	bne.n	8002492 <xQueueGenericSendFromISR+0x6a>
 800248a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <xQueueGenericSendFromISR+0x6e>
 8002492:	2301      	movs	r3, #1
 8002494:	e000      	b.n	8002498 <xQueueGenericSendFromISR+0x70>
 8002496:	2300      	movs	r3, #0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10a      	bne.n	80024b2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800249c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a0:	f383 8811 	msr	BASEPRI, r3
 80024a4:	f3bf 8f6f 	isb	sy
 80024a8:	f3bf 8f4f 	dsb	sy
 80024ac:	61fb      	str	r3, [r7, #28]
}
 80024ae:	bf00      	nop
 80024b0:	e7fe      	b.n	80024b0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80024b2:	f001 ff25 	bl	8004300 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80024b6:	f3ef 8211 	mrs	r2, BASEPRI
 80024ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024be:	f383 8811 	msr	BASEPRI, r3
 80024c2:	f3bf 8f6f 	isb	sy
 80024c6:	f3bf 8f4f 	dsb	sy
 80024ca:	61ba      	str	r2, [r7, #24]
 80024cc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80024ce:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80024d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024da:	429a      	cmp	r2, r3
 80024dc:	d302      	bcc.n	80024e4 <xQueueGenericSendFromISR+0xbc>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d12c      	bne.n	800253e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80024e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	68b9      	ldr	r1, [r7, #8]
 80024f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024f4:	f000 f910 	bl	8002718 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80024f8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80024fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002500:	d112      	bne.n	8002528 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	2b00      	cmp	r3, #0
 8002508:	d016      	beq.n	8002538 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800250a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250c:	3324      	adds	r3, #36	; 0x24
 800250e:	4618      	mov	r0, r3
 8002510:	f000 ff90 	bl	8003434 <xTaskRemoveFromEventList>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00e      	beq.n	8002538 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00b      	beq.n	8002538 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	e007      	b.n	8002538 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002528:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800252c:	3301      	adds	r3, #1
 800252e:	b2db      	uxtb	r3, r3
 8002530:	b25a      	sxtb	r2, r3
 8002532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002538:	2301      	movs	r3, #1
 800253a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800253c:	e001      	b.n	8002542 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800253e:	2300      	movs	r3, #0
 8002540:	637b      	str	r3, [r7, #52]	; 0x34
 8002542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002544:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800254c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800254e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002550:	4618      	mov	r0, r3
 8002552:	3738      	adds	r7, #56	; 0x38
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08c      	sub	sp, #48	; 0x30
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002564:	2300      	movs	r3, #0
 8002566:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800256c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10a      	bne.n	8002588 <xQueueReceive+0x30>
	__asm volatile
 8002572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002576:	f383 8811 	msr	BASEPRI, r3
 800257a:	f3bf 8f6f 	isb	sy
 800257e:	f3bf 8f4f 	dsb	sy
 8002582:	623b      	str	r3, [r7, #32]
}
 8002584:	bf00      	nop
 8002586:	e7fe      	b.n	8002586 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d103      	bne.n	8002596 <xQueueReceive+0x3e>
 800258e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <xQueueReceive+0x42>
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <xQueueReceive+0x44>
 800259a:	2300      	movs	r3, #0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10a      	bne.n	80025b6 <xQueueReceive+0x5e>
	__asm volatile
 80025a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a4:	f383 8811 	msr	BASEPRI, r3
 80025a8:	f3bf 8f6f 	isb	sy
 80025ac:	f3bf 8f4f 	dsb	sy
 80025b0:	61fb      	str	r3, [r7, #28]
}
 80025b2:	bf00      	nop
 80025b4:	e7fe      	b.n	80025b4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025b6:	f001 f8ff 	bl	80037b8 <xTaskGetSchedulerState>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d102      	bne.n	80025c6 <xQueueReceive+0x6e>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <xQueueReceive+0x72>
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <xQueueReceive+0x74>
 80025ca:	2300      	movs	r3, #0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10a      	bne.n	80025e6 <xQueueReceive+0x8e>
	__asm volatile
 80025d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d4:	f383 8811 	msr	BASEPRI, r3
 80025d8:	f3bf 8f6f 	isb	sy
 80025dc:	f3bf 8f4f 	dsb	sy
 80025e0:	61bb      	str	r3, [r7, #24]
}
 80025e2:	bf00      	nop
 80025e4:	e7fe      	b.n	80025e4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80025e6:	f001 fdc9 	bl	800417c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d01f      	beq.n	8002636 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80025f6:	68b9      	ldr	r1, [r7, #8]
 80025f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025fa:	f000 f8f7 	bl	80027ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	1e5a      	subs	r2, r3, #1
 8002602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002604:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00f      	beq.n	800262e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800260e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002610:	3310      	adds	r3, #16
 8002612:	4618      	mov	r0, r3
 8002614:	f000 ff0e 	bl	8003434 <xTaskRemoveFromEventList>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d007      	beq.n	800262e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800261e:	4b3d      	ldr	r3, [pc, #244]	; (8002714 <xQueueReceive+0x1bc>)
 8002620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	f3bf 8f4f 	dsb	sy
 800262a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800262e:	f001 fdd5 	bl	80041dc <vPortExitCritical>
				return pdPASS;
 8002632:	2301      	movs	r3, #1
 8002634:	e069      	b.n	800270a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d103      	bne.n	8002644 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800263c:	f001 fdce 	bl	80041dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002640:	2300      	movs	r3, #0
 8002642:	e062      	b.n	800270a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002646:	2b00      	cmp	r3, #0
 8002648:	d106      	bne.n	8002658 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800264a:	f107 0310 	add.w	r3, r7, #16
 800264e:	4618      	mov	r0, r3
 8002650:	f000 ff54 	bl	80034fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002654:	2301      	movs	r3, #1
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002658:	f001 fdc0 	bl	80041dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800265c:	f000 fcc6 	bl	8002fec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002660:	f001 fd8c 	bl	800417c <vPortEnterCritical>
 8002664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002666:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800266a:	b25b      	sxtb	r3, r3
 800266c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002670:	d103      	bne.n	800267a <xQueueReceive+0x122>
 8002672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800267a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002680:	b25b      	sxtb	r3, r3
 8002682:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002686:	d103      	bne.n	8002690 <xQueueReceive+0x138>
 8002688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002690:	f001 fda4 	bl	80041dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002694:	1d3a      	adds	r2, r7, #4
 8002696:	f107 0310 	add.w	r3, r7, #16
 800269a:	4611      	mov	r1, r2
 800269c:	4618      	mov	r0, r3
 800269e:	f000 ff43 	bl	8003528 <xTaskCheckForTimeOut>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d123      	bne.n	80026f0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026aa:	f000 f917 	bl	80028dc <prvIsQueueEmpty>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d017      	beq.n	80026e4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80026b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b6:	3324      	adds	r3, #36	; 0x24
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	4611      	mov	r1, r2
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 fe69 	bl	8003394 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80026c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026c4:	f000 f8b8 	bl	8002838 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80026c8:	f000 fc9e 	bl	8003008 <xTaskResumeAll>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d189      	bne.n	80025e6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80026d2:	4b10      	ldr	r3, [pc, #64]	; (8002714 <xQueueReceive+0x1bc>)
 80026d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	f3bf 8f4f 	dsb	sy
 80026de:	f3bf 8f6f 	isb	sy
 80026e2:	e780      	b.n	80025e6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80026e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026e6:	f000 f8a7 	bl	8002838 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80026ea:	f000 fc8d 	bl	8003008 <xTaskResumeAll>
 80026ee:	e77a      	b.n	80025e6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80026f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026f2:	f000 f8a1 	bl	8002838 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80026f6:	f000 fc87 	bl	8003008 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026fc:	f000 f8ee 	bl	80028dc <prvIsQueueEmpty>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	f43f af6f 	beq.w	80025e6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002708:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800270a:	4618      	mov	r0, r3
 800270c:	3730      	adds	r7, #48	; 0x30
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	e000ed04 	.word	0xe000ed04

08002718 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10d      	bne.n	8002752 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d14d      	bne.n	80027da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	4618      	mov	r0, r3
 8002744:	f001 f856 	bl	80037f4 <xTaskPriorityDisinherit>
 8002748:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	605a      	str	r2, [r3, #4]
 8002750:	e043      	b.n	80027da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d119      	bne.n	800278c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6898      	ldr	r0, [r3, #8]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	461a      	mov	r2, r3
 8002762:	68b9      	ldr	r1, [r7, #8]
 8002764:	f002 f80e 	bl	8004784 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	441a      	add	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	429a      	cmp	r2, r3
 8002780:	d32b      	bcc.n	80027da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	609a      	str	r2, [r3, #8]
 800278a:	e026      	b.n	80027da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	68d8      	ldr	r0, [r3, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	461a      	mov	r2, r3
 8002796:	68b9      	ldr	r1, [r7, #8]
 8002798:	f001 fff4 	bl	8004784 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	68da      	ldr	r2, [r3, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	425b      	negs	r3, r3
 80027a6:	441a      	add	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	68da      	ldr	r2, [r3, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d207      	bcs.n	80027c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	425b      	negs	r3, r3
 80027c2:	441a      	add	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d105      	bne.n	80027da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d002      	beq.n	80027da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1c5a      	adds	r2, r3, #1
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80027e2:	697b      	ldr	r3, [r7, #20]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d018      	beq.n	8002830 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	441a      	add	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	429a      	cmp	r2, r3
 8002816:	d303      	bcc.n	8002820 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68d9      	ldr	r1, [r3, #12]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	461a      	mov	r2, r3
 800282a:	6838      	ldr	r0, [r7, #0]
 800282c:	f001 ffaa 	bl	8004784 <memcpy>
	}
}
 8002830:	bf00      	nop
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002840:	f001 fc9c 	bl	800417c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800284a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800284c:	e011      	b.n	8002872 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	2b00      	cmp	r3, #0
 8002854:	d012      	beq.n	800287c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3324      	adds	r3, #36	; 0x24
 800285a:	4618      	mov	r0, r3
 800285c:	f000 fdea 	bl	8003434 <xTaskRemoveFromEventList>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002866:	f000 fec1 	bl	80035ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800286a:	7bfb      	ldrb	r3, [r7, #15]
 800286c:	3b01      	subs	r3, #1
 800286e:	b2db      	uxtb	r3, r3
 8002870:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002876:	2b00      	cmp	r3, #0
 8002878:	dce9      	bgt.n	800284e <prvUnlockQueue+0x16>
 800287a:	e000      	b.n	800287e <prvUnlockQueue+0x46>
					break;
 800287c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	22ff      	movs	r2, #255	; 0xff
 8002882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002886:	f001 fca9 	bl	80041dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800288a:	f001 fc77 	bl	800417c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002894:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002896:	e011      	b.n	80028bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d012      	beq.n	80028c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3310      	adds	r3, #16
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 fdc5 	bl	8003434 <xTaskRemoveFromEventList>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80028b0:	f000 fe9c 	bl	80035ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80028b4:	7bbb      	ldrb	r3, [r7, #14]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80028bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	dce9      	bgt.n	8002898 <prvUnlockQueue+0x60>
 80028c4:	e000      	b.n	80028c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80028c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	22ff      	movs	r2, #255	; 0xff
 80028cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80028d0:	f001 fc84 	bl	80041dc <vPortExitCritical>
}
 80028d4:	bf00      	nop
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80028e4:	f001 fc4a 	bl	800417c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d102      	bne.n	80028f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80028f0:	2301      	movs	r3, #1
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	e001      	b.n	80028fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80028fa:	f001 fc6f 	bl	80041dc <vPortExitCritical>

	return xReturn;
 80028fe:	68fb      	ldr	r3, [r7, #12]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002910:	f001 fc34 	bl	800417c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291c:	429a      	cmp	r2, r3
 800291e:	d102      	bne.n	8002926 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002920:	2301      	movs	r3, #1
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	e001      	b.n	800292a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800292a:	f001 fc57 	bl	80041dc <vPortExitCritical>

	return xReturn;
 800292e:	68fb      	ldr	r3, [r7, #12]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002942:	2300      	movs	r3, #0
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	e014      	b.n	8002972 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002948:	4a0e      	ldr	r2, [pc, #56]	; (8002984 <vQueueAddToRegistry+0x4c>)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10b      	bne.n	800296c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002954:	490b      	ldr	r1, [pc, #44]	; (8002984 <vQueueAddToRegistry+0x4c>)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800295e:	4a09      	ldr	r2, [pc, #36]	; (8002984 <vQueueAddToRegistry+0x4c>)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	4413      	add	r3, r2
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800296a:	e006      	b.n	800297a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	3301      	adds	r3, #1
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2b07      	cmp	r3, #7
 8002976:	d9e7      	bls.n	8002948 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002978:	bf00      	nop
 800297a:	bf00      	nop
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr
 8002984:	20001388 	.word	0x20001388

08002988 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002998:	f001 fbf0 	bl	800417c <vPortEnterCritical>
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029a2:	b25b      	sxtb	r3, r3
 80029a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029a8:	d103      	bne.n	80029b2 <vQueueWaitForMessageRestricted+0x2a>
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029b8:	b25b      	sxtb	r3, r3
 80029ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029be:	d103      	bne.n	80029c8 <vQueueWaitForMessageRestricted+0x40>
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029c8:	f001 fc08 	bl	80041dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d106      	bne.n	80029e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	3324      	adds	r3, #36	; 0x24
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	68b9      	ldr	r1, [r7, #8]
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 fcfd 	bl	80033dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80029e2:	6978      	ldr	r0, [r7, #20]
 80029e4:	f7ff ff28 	bl	8002838 <prvUnlockQueue>
	}
 80029e8:	bf00      	nop
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08e      	sub	sp, #56	; 0x38
 80029f4:	af04      	add	r7, sp, #16
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80029fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10a      	bne.n	8002a1a <xTaskCreateStatic+0x2a>
	__asm volatile
 8002a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a08:	f383 8811 	msr	BASEPRI, r3
 8002a0c:	f3bf 8f6f 	isb	sy
 8002a10:	f3bf 8f4f 	dsb	sy
 8002a14:	623b      	str	r3, [r7, #32]
}
 8002a16:	bf00      	nop
 8002a18:	e7fe      	b.n	8002a18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10a      	bne.n	8002a36 <xTaskCreateStatic+0x46>
	__asm volatile
 8002a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a24:	f383 8811 	msr	BASEPRI, r3
 8002a28:	f3bf 8f6f 	isb	sy
 8002a2c:	f3bf 8f4f 	dsb	sy
 8002a30:	61fb      	str	r3, [r7, #28]
}
 8002a32:	bf00      	nop
 8002a34:	e7fe      	b.n	8002a34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002a36:	235c      	movs	r3, #92	; 0x5c
 8002a38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	2b5c      	cmp	r3, #92	; 0x5c
 8002a3e:	d00a      	beq.n	8002a56 <xTaskCreateStatic+0x66>
	__asm volatile
 8002a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a44:	f383 8811 	msr	BASEPRI, r3
 8002a48:	f3bf 8f6f 	isb	sy
 8002a4c:	f3bf 8f4f 	dsb	sy
 8002a50:	61bb      	str	r3, [r7, #24]
}
 8002a52:	bf00      	nop
 8002a54:	e7fe      	b.n	8002a54 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d01e      	beq.n	8002a9a <xTaskCreateStatic+0xaa>
 8002a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d01b      	beq.n	8002a9a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a6a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	2202      	movs	r2, #2
 8002a70:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002a74:	2300      	movs	r3, #0
 8002a76:	9303      	str	r3, [sp, #12]
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	9302      	str	r3, [sp, #8]
 8002a7c:	f107 0314 	add.w	r3, r7, #20
 8002a80:	9301      	str	r3, [sp, #4]
 8002a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	68b9      	ldr	r1, [r7, #8]
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 f850 	bl	8002b32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a94:	f000 f8d4 	bl	8002c40 <prvAddNewTaskToReadyList>
 8002a98:	e001      	b.n	8002a9e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002a9e:	697b      	ldr	r3, [r7, #20]
	}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3728      	adds	r7, #40	; 0x28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08c      	sub	sp, #48	; 0x30
 8002aac:	af04      	add	r7, sp, #16
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ab8:	88fb      	ldrh	r3, [r7, #6]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f001 fc5d 	bl	800437c <pvPortMalloc>
 8002ac2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00e      	beq.n	8002ae8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002aca:	205c      	movs	r0, #92	; 0x5c
 8002acc:	f001 fc56 	bl	800437c <pvPortMalloc>
 8002ad0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	631a      	str	r2, [r3, #48]	; 0x30
 8002ade:	e005      	b.n	8002aec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002ae0:	6978      	ldr	r0, [r7, #20]
 8002ae2:	f001 fd0f 	bl	8004504 <vPortFree>
 8002ae6:	e001      	b.n	8002aec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d017      	beq.n	8002b22 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002afa:	88fa      	ldrh	r2, [r7, #6]
 8002afc:	2300      	movs	r3, #0
 8002afe:	9303      	str	r3, [sp, #12]
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	9302      	str	r3, [sp, #8]
 8002b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b06:	9301      	str	r3, [sp, #4]
 8002b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	68b9      	ldr	r1, [r7, #8]
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 f80e 	bl	8002b32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b16:	69f8      	ldr	r0, [r7, #28]
 8002b18:	f000 f892 	bl	8002c40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	61bb      	str	r3, [r7, #24]
 8002b20:	e002      	b.n	8002b28 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b26:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002b28:	69bb      	ldr	r3, [r7, #24]
	}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3720      	adds	r7, #32
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b088      	sub	sp, #32
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	607a      	str	r2, [r7, #4]
 8002b3e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b42:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	461a      	mov	r2, r3
 8002b4a:	21a5      	movs	r1, #165	; 0xa5
 8002b4c:	f001 fdee 	bl	800472c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	f023 0307 	bic.w	r3, r3, #7
 8002b68:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00a      	beq.n	8002b8a <prvInitialiseNewTask+0x58>
	__asm volatile
 8002b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b78:	f383 8811 	msr	BASEPRI, r3
 8002b7c:	f3bf 8f6f 	isb	sy
 8002b80:	f3bf 8f4f 	dsb	sy
 8002b84:	617b      	str	r3, [r7, #20]
}
 8002b86:	bf00      	nop
 8002b88:	e7fe      	b.n	8002b88 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
 8002b8e:	e012      	b.n	8002bb6 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	4413      	add	r3, r2
 8002b96:	7819      	ldrb	r1, [r3, #0]
 8002b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3334      	adds	r3, #52	; 0x34
 8002ba0:	460a      	mov	r2, r1
 8002ba2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	4413      	add	r3, r2
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d006      	beq.n	8002bbe <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	61fb      	str	r3, [r7, #28]
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	2b0f      	cmp	r3, #15
 8002bba:	d9e9      	bls.n	8002b90 <prvInitialiseNewTask+0x5e>
 8002bbc:	e000      	b.n	8002bc0 <prvInitialiseNewTask+0x8e>
		{
			break;
 8002bbe:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bca:	2b37      	cmp	r3, #55	; 0x37
 8002bcc:	d901      	bls.n	8002bd2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002bce:	2337      	movs	r3, #55	; 0x37
 8002bd0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bd6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bdc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be0:	2200      	movs	r2, #0
 8002be2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be6:	3304      	adds	r3, #4
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff f94e 	bl	8001e8a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf0:	3318      	adds	r3, #24
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff f949 	bl	8001e8a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bfc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c06:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c0c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c10:	2200      	movs	r2, #0
 8002c12:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	68f9      	ldr	r1, [r7, #12]
 8002c20:	69b8      	ldr	r0, [r7, #24]
 8002c22:	f001 f9bb 	bl	8003f9c <pxPortInitialiseStack>
 8002c26:	4602      	mov	r2, r0
 8002c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d002      	beq.n	8002c38 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c36:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c38:	bf00      	nop
 8002c3a:	3720      	adds	r7, #32
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002c48:	f001 fa98 	bl	800417c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002c4c:	4b2d      	ldr	r3, [pc, #180]	; (8002d04 <prvAddNewTaskToReadyList+0xc4>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	3301      	adds	r3, #1
 8002c52:	4a2c      	ldr	r2, [pc, #176]	; (8002d04 <prvAddNewTaskToReadyList+0xc4>)
 8002c54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002c56:	4b2c      	ldr	r3, [pc, #176]	; (8002d08 <prvAddNewTaskToReadyList+0xc8>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d109      	bne.n	8002c72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002c5e:	4a2a      	ldr	r2, [pc, #168]	; (8002d08 <prvAddNewTaskToReadyList+0xc8>)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c64:	4b27      	ldr	r3, [pc, #156]	; (8002d04 <prvAddNewTaskToReadyList+0xc4>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d110      	bne.n	8002c8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002c6c:	f000 fce2 	bl	8003634 <prvInitialiseTaskLists>
 8002c70:	e00d      	b.n	8002c8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002c72:	4b26      	ldr	r3, [pc, #152]	; (8002d0c <prvAddNewTaskToReadyList+0xcc>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d109      	bne.n	8002c8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c7a:	4b23      	ldr	r3, [pc, #140]	; (8002d08 <prvAddNewTaskToReadyList+0xc8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d802      	bhi.n	8002c8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002c88:	4a1f      	ldr	r2, [pc, #124]	; (8002d08 <prvAddNewTaskToReadyList+0xc8>)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002c8e:	4b20      	ldr	r3, [pc, #128]	; (8002d10 <prvAddNewTaskToReadyList+0xd0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	3301      	adds	r3, #1
 8002c94:	4a1e      	ldr	r2, [pc, #120]	; (8002d10 <prvAddNewTaskToReadyList+0xd0>)
 8002c96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002c98:	4b1d      	ldr	r3, [pc, #116]	; (8002d10 <prvAddNewTaskToReadyList+0xd0>)
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca4:	4b1b      	ldr	r3, [pc, #108]	; (8002d14 <prvAddNewTaskToReadyList+0xd4>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d903      	bls.n	8002cb4 <prvAddNewTaskToReadyList+0x74>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb0:	4a18      	ldr	r2, [pc, #96]	; (8002d14 <prvAddNewTaskToReadyList+0xd4>)
 8002cb2:	6013      	str	r3, [r2, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb8:	4613      	mov	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4a15      	ldr	r2, [pc, #84]	; (8002d18 <prvAddNewTaskToReadyList+0xd8>)
 8002cc2:	441a      	add	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4610      	mov	r0, r2
 8002ccc:	f7ff f8e9 	bl	8001ea2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002cd0:	f001 fa84 	bl	80041dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002cd4:	4b0d      	ldr	r3, [pc, #52]	; (8002d0c <prvAddNewTaskToReadyList+0xcc>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00e      	beq.n	8002cfa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <prvAddNewTaskToReadyList+0xc8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d207      	bcs.n	8002cfa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002cea:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <prvAddNewTaskToReadyList+0xdc>)
 8002cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	f3bf 8f4f 	dsb	sy
 8002cf6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002cfa:	bf00      	nop
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	2000189c 	.word	0x2000189c
 8002d08:	200013c8 	.word	0x200013c8
 8002d0c:	200018a8 	.word	0x200018a8
 8002d10:	200018b8 	.word	0x200018b8
 8002d14:	200018a4 	.word	0x200018a4
 8002d18:	200013cc 	.word	0x200013cc
 8002d1c:	e000ed04 	.word	0xe000ed04

08002d20 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002d28:	f001 fa28 	bl	800417c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d102      	bne.n	8002d38 <vTaskDelete+0x18>
 8002d32:	4b2c      	ldr	r3, [pc, #176]	; (8002de4 <vTaskDelete+0xc4>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	e000      	b.n	8002d3a <vTaskDelete+0x1a>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	3304      	adds	r3, #4
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff f909 	bl	8001f58 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d004      	beq.n	8002d58 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	3318      	adds	r3, #24
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff f900 	bl	8001f58 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8002d58:	4b23      	ldr	r3, [pc, #140]	; (8002de8 <vTaskDelete+0xc8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	4a22      	ldr	r2, [pc, #136]	; (8002de8 <vTaskDelete+0xc8>)
 8002d60:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8002d62:	4b20      	ldr	r3, [pc, #128]	; (8002de4 <vTaskDelete+0xc4>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d10b      	bne.n	8002d84 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	3304      	adds	r3, #4
 8002d70:	4619      	mov	r1, r3
 8002d72:	481e      	ldr	r0, [pc, #120]	; (8002dec <vTaskDelete+0xcc>)
 8002d74:	f7ff f895 	bl	8001ea2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8002d78:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <vTaskDelete+0xd0>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	4a1c      	ldr	r2, [pc, #112]	; (8002df0 <vTaskDelete+0xd0>)
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	e009      	b.n	8002d98 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8002d84:	4b1b      	ldr	r3, [pc, #108]	; (8002df4 <vTaskDelete+0xd4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	4a1a      	ldr	r2, [pc, #104]	; (8002df4 <vTaskDelete+0xd4>)
 8002d8c:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 fcbe 	bl	8003710 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8002d94:	f000 fcec 	bl	8003770 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8002d98:	f001 fa20 	bl	80041dc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8002d9c:	4b16      	ldr	r3, [pc, #88]	; (8002df8 <vTaskDelete+0xd8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d01b      	beq.n	8002ddc <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8002da4:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <vTaskDelete+0xc4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d116      	bne.n	8002ddc <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8002dae:	4b13      	ldr	r3, [pc, #76]	; (8002dfc <vTaskDelete+0xdc>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00a      	beq.n	8002dcc <vTaskDelete+0xac>
	__asm volatile
 8002db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dba:	f383 8811 	msr	BASEPRI, r3
 8002dbe:	f3bf 8f6f 	isb	sy
 8002dc2:	f3bf 8f4f 	dsb	sy
 8002dc6:	60bb      	str	r3, [r7, #8]
}
 8002dc8:	bf00      	nop
 8002dca:	e7fe      	b.n	8002dca <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <vTaskDelete+0xe0>)
 8002dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	f3bf 8f4f 	dsb	sy
 8002dd8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002ddc:	bf00      	nop
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	200013c8 	.word	0x200013c8
 8002de8:	200018b8 	.word	0x200018b8
 8002dec:	20001870 	.word	0x20001870
 8002df0:	20001884 	.word	0x20001884
 8002df4:	2000189c 	.word	0x2000189c
 8002df8:	200018a8 	.word	0x200018a8
 8002dfc:	200018c4 	.word	0x200018c4
 8002e00:	e000ed04 	.word	0xe000ed04

08002e04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d017      	beq.n	8002e46 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002e16:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <vTaskDelay+0x60>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00a      	beq.n	8002e34 <vTaskDelay+0x30>
	__asm volatile
 8002e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e22:	f383 8811 	msr	BASEPRI, r3
 8002e26:	f3bf 8f6f 	isb	sy
 8002e2a:	f3bf 8f4f 	dsb	sy
 8002e2e:	60bb      	str	r3, [r7, #8]
}
 8002e30:	bf00      	nop
 8002e32:	e7fe      	b.n	8002e32 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002e34:	f000 f8da 	bl	8002fec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e38:	2100      	movs	r1, #0
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 fd48 	bl	80038d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002e40:	f000 f8e2 	bl	8003008 <xTaskResumeAll>
 8002e44:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d107      	bne.n	8002e5c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <vTaskDelay+0x64>)
 8002e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	f3bf 8f4f 	dsb	sy
 8002e58:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002e5c:	bf00      	nop
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	200018c4 	.word	0x200018c4
 8002e68:	e000ed04 	.word	0xe000ed04

08002e6c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t *pxStateList;
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	613b      	str	r3, [r7, #16]

		configASSERT( pxTCB );
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10a      	bne.n	8002e94 <eTaskGetState+0x28>
	__asm volatile
 8002e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e82:	f383 8811 	msr	BASEPRI, r3
 8002e86:	f3bf 8f6f 	isb	sy
 8002e8a:	f3bf 8f4f 	dsb	sy
 8002e8e:	60bb      	str	r3, [r7, #8]
}
 8002e90:	bf00      	nop
 8002e92:	e7fe      	b.n	8002e92 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8002e94:	4b1d      	ldr	r3, [pc, #116]	; (8002f0c <eTaskGetState+0xa0>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d102      	bne.n	8002ea4 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	75fb      	strb	r3, [r7, #23]
 8002ea2:	e02d      	b.n	8002f00 <eTaskGetState+0x94>
		}
		else
		{
			taskENTER_CRITICAL();
 8002ea4:	f001 f96a 	bl	800417c <vPortEnterCritical>
			{
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8002eae:	f001 f995 	bl	80041dc <vPortExitCritical>

			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 8002eb2:	4b17      	ldr	r3, [pc, #92]	; (8002f10 <eTaskGetState+0xa4>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d004      	beq.n	8002ec6 <eTaskGetState+0x5a>
 8002ebc:	4b15      	ldr	r3, [pc, #84]	; (8002f14 <eTaskGetState+0xa8>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d102      	bne.n	8002ecc <eTaskGetState+0x60>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	75fb      	strb	r3, [r7, #23]
 8002eca:	e019      	b.n	8002f00 <eTaskGetState+0x94>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4a12      	ldr	r2, [pc, #72]	; (8002f18 <eTaskGetState+0xac>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d109      	bne.n	8002ee8 <eTaskGetState+0x7c>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it block
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d102      	bne.n	8002ee2 <eTaskGetState+0x76>
					{
						eReturn = eSuspended;
 8002edc:	2303      	movs	r3, #3
 8002ede:	75fb      	strb	r3, [r7, #23]
 8002ee0:	e00e      	b.n	8002f00 <eTaskGetState+0x94>
					}
					else
					{
						eReturn = eBlocked;
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	75fb      	strb	r3, [r7, #23]
 8002ee6:	e00b      	b.n	8002f00 <eTaskGetState+0x94>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4a0c      	ldr	r2, [pc, #48]	; (8002f1c <eTaskGetState+0xb0>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d002      	beq.n	8002ef6 <eTaskGetState+0x8a>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d102      	bne.n	8002efc <eTaskGetState+0x90>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8002ef6:	2304      	movs	r3, #4
 8002ef8:	75fb      	strb	r3, [r7, #23]
 8002efa:	e001      	b.n	8002f00 <eTaskGetState+0x94>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8002efc:	2301      	movs	r3, #1
 8002efe:	75fb      	strb	r3, [r7, #23]
			}
		}

		return eReturn;
 8002f00:	7dfb      	ldrb	r3, [r7, #23]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8002f02:	4618      	mov	r0, r3
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	200013c8 	.word	0x200013c8
 8002f10:	20001854 	.word	0x20001854
 8002f14:	20001858 	.word	0x20001858
 8002f18:	20001888 	.word	0x20001888
 8002f1c:	20001870 	.word	0x20001870

08002f20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08a      	sub	sp, #40	; 0x28
 8002f24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f2e:	463a      	mov	r2, r7
 8002f30:	1d39      	adds	r1, r7, #4
 8002f32:	f107 0308 	add.w	r3, r7, #8
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fe ff56 	bl	8001de8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f3c:	6839      	ldr	r1, [r7, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	9202      	str	r2, [sp, #8]
 8002f44:	9301      	str	r3, [sp, #4]
 8002f46:	2300      	movs	r3, #0
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	460a      	mov	r2, r1
 8002f4e:	4921      	ldr	r1, [pc, #132]	; (8002fd4 <vTaskStartScheduler+0xb4>)
 8002f50:	4821      	ldr	r0, [pc, #132]	; (8002fd8 <vTaskStartScheduler+0xb8>)
 8002f52:	f7ff fd4d 	bl	80029f0 <xTaskCreateStatic>
 8002f56:	4603      	mov	r3, r0
 8002f58:	4a20      	ldr	r2, [pc, #128]	; (8002fdc <vTaskStartScheduler+0xbc>)
 8002f5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002f5c:	4b1f      	ldr	r3, [pc, #124]	; (8002fdc <vTaskStartScheduler+0xbc>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d002      	beq.n	8002f6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002f64:	2301      	movs	r3, #1
 8002f66:	617b      	str	r3, [r7, #20]
 8002f68:	e001      	b.n	8002f6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d102      	bne.n	8002f7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002f74:	f000 fd00 	bl	8003978 <xTimerCreateTimerTask>
 8002f78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d116      	bne.n	8002fae <vTaskStartScheduler+0x8e>
	__asm volatile
 8002f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	613b      	str	r3, [r7, #16]
}
 8002f92:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002f94:	4b12      	ldr	r3, [pc, #72]	; (8002fe0 <vTaskStartScheduler+0xc0>)
 8002f96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f9a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002f9c:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <vTaskStartScheduler+0xc4>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002fa2:	4b11      	ldr	r3, [pc, #68]	; (8002fe8 <vTaskStartScheduler+0xc8>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002fa8:	f001 f876 	bl	8004098 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002fac:	e00e      	b.n	8002fcc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fb4:	d10a      	bne.n	8002fcc <vTaskStartScheduler+0xac>
	__asm volatile
 8002fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fba:	f383 8811 	msr	BASEPRI, r3
 8002fbe:	f3bf 8f6f 	isb	sy
 8002fc2:	f3bf 8f4f 	dsb	sy
 8002fc6:	60fb      	str	r3, [r7, #12]
}
 8002fc8:	bf00      	nop
 8002fca:	e7fe      	b.n	8002fca <vTaskStartScheduler+0xaa>
}
 8002fcc:	bf00      	nop
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	08004814 	.word	0x08004814
 8002fd8:	08003605 	.word	0x08003605
 8002fdc:	200018c0 	.word	0x200018c0
 8002fe0:	200018bc 	.word	0x200018bc
 8002fe4:	200018a8 	.word	0x200018a8
 8002fe8:	200018a0 	.word	0x200018a0

08002fec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002ff0:	4b04      	ldr	r3, [pc, #16]	; (8003004 <vTaskSuspendAll+0x18>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	4a03      	ldr	r2, [pc, #12]	; (8003004 <vTaskSuspendAll+0x18>)
 8002ff8:	6013      	str	r3, [r2, #0]
}
 8002ffa:	bf00      	nop
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	200018c4 	.word	0x200018c4

08003008 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800300e:	2300      	movs	r3, #0
 8003010:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003012:	2300      	movs	r3, #0
 8003014:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003016:	4b42      	ldr	r3, [pc, #264]	; (8003120 <xTaskResumeAll+0x118>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10a      	bne.n	8003034 <xTaskResumeAll+0x2c>
	__asm volatile
 800301e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003022:	f383 8811 	msr	BASEPRI, r3
 8003026:	f3bf 8f6f 	isb	sy
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	603b      	str	r3, [r7, #0]
}
 8003030:	bf00      	nop
 8003032:	e7fe      	b.n	8003032 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003034:	f001 f8a2 	bl	800417c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003038:	4b39      	ldr	r3, [pc, #228]	; (8003120 <xTaskResumeAll+0x118>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	3b01      	subs	r3, #1
 800303e:	4a38      	ldr	r2, [pc, #224]	; (8003120 <xTaskResumeAll+0x118>)
 8003040:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003042:	4b37      	ldr	r3, [pc, #220]	; (8003120 <xTaskResumeAll+0x118>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d162      	bne.n	8003110 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800304a:	4b36      	ldr	r3, [pc, #216]	; (8003124 <xTaskResumeAll+0x11c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d05e      	beq.n	8003110 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003052:	e02f      	b.n	80030b4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003054:	4b34      	ldr	r3, [pc, #208]	; (8003128 <xTaskResumeAll+0x120>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	3318      	adds	r3, #24
 8003060:	4618      	mov	r0, r3
 8003062:	f7fe ff79 	bl	8001f58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	3304      	adds	r3, #4
 800306a:	4618      	mov	r0, r3
 800306c:	f7fe ff74 	bl	8001f58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003074:	4b2d      	ldr	r3, [pc, #180]	; (800312c <xTaskResumeAll+0x124>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d903      	bls.n	8003084 <xTaskResumeAll+0x7c>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003080:	4a2a      	ldr	r2, [pc, #168]	; (800312c <xTaskResumeAll+0x124>)
 8003082:	6013      	str	r3, [r2, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003088:	4613      	mov	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4413      	add	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4a27      	ldr	r2, [pc, #156]	; (8003130 <xTaskResumeAll+0x128>)
 8003092:	441a      	add	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	3304      	adds	r3, #4
 8003098:	4619      	mov	r1, r3
 800309a:	4610      	mov	r0, r2
 800309c:	f7fe ff01 	bl	8001ea2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a4:	4b23      	ldr	r3, [pc, #140]	; (8003134 <xTaskResumeAll+0x12c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d302      	bcc.n	80030b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80030ae:	4b22      	ldr	r3, [pc, #136]	; (8003138 <xTaskResumeAll+0x130>)
 80030b0:	2201      	movs	r2, #1
 80030b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030b4:	4b1c      	ldr	r3, [pc, #112]	; (8003128 <xTaskResumeAll+0x120>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1cb      	bne.n	8003054 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80030c2:	f000 fb55 	bl	8003770 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80030c6:	4b1d      	ldr	r3, [pc, #116]	; (800313c <xTaskResumeAll+0x134>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d010      	beq.n	80030f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80030d2:	f000 f845 	bl	8003160 <xTaskIncrementTick>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d002      	beq.n	80030e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80030dc:	4b16      	ldr	r3, [pc, #88]	; (8003138 <xTaskResumeAll+0x130>)
 80030de:	2201      	movs	r2, #1
 80030e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3b01      	subs	r3, #1
 80030e6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f1      	bne.n	80030d2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80030ee:	4b13      	ldr	r3, [pc, #76]	; (800313c <xTaskResumeAll+0x134>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80030f4:	4b10      	ldr	r3, [pc, #64]	; (8003138 <xTaskResumeAll+0x130>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d009      	beq.n	8003110 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80030fc:	2301      	movs	r3, #1
 80030fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003100:	4b0f      	ldr	r3, [pc, #60]	; (8003140 <xTaskResumeAll+0x138>)
 8003102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	f3bf 8f4f 	dsb	sy
 800310c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003110:	f001 f864 	bl	80041dc <vPortExitCritical>

	return xAlreadyYielded;
 8003114:	68bb      	ldr	r3, [r7, #8]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	200018c4 	.word	0x200018c4
 8003124:	2000189c 	.word	0x2000189c
 8003128:	2000185c 	.word	0x2000185c
 800312c:	200018a4 	.word	0x200018a4
 8003130:	200013cc 	.word	0x200013cc
 8003134:	200013c8 	.word	0x200013c8
 8003138:	200018b0 	.word	0x200018b0
 800313c:	200018ac 	.word	0x200018ac
 8003140:	e000ed04 	.word	0xe000ed04

08003144 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800314a:	4b04      	ldr	r3, [pc, #16]	; (800315c <xTaskGetTickCount+0x18>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003150:	687b      	ldr	r3, [r7, #4]
}
 8003152:	4618      	mov	r0, r3
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr
 800315c:	200018a0 	.word	0x200018a0

08003160 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800316a:	4b51      	ldr	r3, [pc, #324]	; (80032b0 <xTaskIncrementTick+0x150>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	f040 808e 	bne.w	8003290 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003174:	4b4f      	ldr	r3, [pc, #316]	; (80032b4 <xTaskIncrementTick+0x154>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3301      	adds	r3, #1
 800317a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800317c:	4a4d      	ldr	r2, [pc, #308]	; (80032b4 <xTaskIncrementTick+0x154>)
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d120      	bne.n	80031ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003188:	4b4b      	ldr	r3, [pc, #300]	; (80032b8 <xTaskIncrementTick+0x158>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00a      	beq.n	80031a8 <xTaskIncrementTick+0x48>
	__asm volatile
 8003192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003196:	f383 8811 	msr	BASEPRI, r3
 800319a:	f3bf 8f6f 	isb	sy
 800319e:	f3bf 8f4f 	dsb	sy
 80031a2:	603b      	str	r3, [r7, #0]
}
 80031a4:	bf00      	nop
 80031a6:	e7fe      	b.n	80031a6 <xTaskIncrementTick+0x46>
 80031a8:	4b43      	ldr	r3, [pc, #268]	; (80032b8 <xTaskIncrementTick+0x158>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	4b43      	ldr	r3, [pc, #268]	; (80032bc <xTaskIncrementTick+0x15c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a41      	ldr	r2, [pc, #260]	; (80032b8 <xTaskIncrementTick+0x158>)
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	4a41      	ldr	r2, [pc, #260]	; (80032bc <xTaskIncrementTick+0x15c>)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	4b40      	ldr	r3, [pc, #256]	; (80032c0 <xTaskIncrementTick+0x160>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	3301      	adds	r3, #1
 80031c2:	4a3f      	ldr	r2, [pc, #252]	; (80032c0 <xTaskIncrementTick+0x160>)
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	f000 fad3 	bl	8003770 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80031ca:	4b3e      	ldr	r3, [pc, #248]	; (80032c4 <xTaskIncrementTick+0x164>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d34e      	bcc.n	8003272 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031d4:	4b38      	ldr	r3, [pc, #224]	; (80032b8 <xTaskIncrementTick+0x158>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <xTaskIncrementTick+0x82>
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <xTaskIncrementTick+0x84>
 80031e2:	2300      	movs	r3, #0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d004      	beq.n	80031f2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031e8:	4b36      	ldr	r3, [pc, #216]	; (80032c4 <xTaskIncrementTick+0x164>)
 80031ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031ee:	601a      	str	r2, [r3, #0]
					break;
 80031f0:	e03f      	b.n	8003272 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80031f2:	4b31      	ldr	r3, [pc, #196]	; (80032b8 <xTaskIncrementTick+0x158>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	429a      	cmp	r2, r3
 8003208:	d203      	bcs.n	8003212 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800320a:	4a2e      	ldr	r2, [pc, #184]	; (80032c4 <xTaskIncrementTick+0x164>)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6013      	str	r3, [r2, #0]
						break;
 8003210:	e02f      	b.n	8003272 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	3304      	adds	r3, #4
 8003216:	4618      	mov	r0, r3
 8003218:	f7fe fe9e 	bl	8001f58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003220:	2b00      	cmp	r3, #0
 8003222:	d004      	beq.n	800322e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	3318      	adds	r3, #24
 8003228:	4618      	mov	r0, r3
 800322a:	f7fe fe95 	bl	8001f58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003232:	4b25      	ldr	r3, [pc, #148]	; (80032c8 <xTaskIncrementTick+0x168>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d903      	bls.n	8003242 <xTaskIncrementTick+0xe2>
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323e:	4a22      	ldr	r2, [pc, #136]	; (80032c8 <xTaskIncrementTick+0x168>)
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4a1f      	ldr	r2, [pc, #124]	; (80032cc <xTaskIncrementTick+0x16c>)
 8003250:	441a      	add	r2, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	3304      	adds	r3, #4
 8003256:	4619      	mov	r1, r3
 8003258:	4610      	mov	r0, r2
 800325a:	f7fe fe22 	bl	8001ea2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003262:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <xTaskIncrementTick+0x170>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003268:	429a      	cmp	r2, r3
 800326a:	d3b3      	bcc.n	80031d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800326c:	2301      	movs	r3, #1
 800326e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003270:	e7b0      	b.n	80031d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003272:	4b17      	ldr	r3, [pc, #92]	; (80032d0 <xTaskIncrementTick+0x170>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003278:	4914      	ldr	r1, [pc, #80]	; (80032cc <xTaskIncrementTick+0x16c>)
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	440b      	add	r3, r1
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d907      	bls.n	800329a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800328a:	2301      	movs	r3, #1
 800328c:	617b      	str	r3, [r7, #20]
 800328e:	e004      	b.n	800329a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003290:	4b10      	ldr	r3, [pc, #64]	; (80032d4 <xTaskIncrementTick+0x174>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	3301      	adds	r3, #1
 8003296:	4a0f      	ldr	r2, [pc, #60]	; (80032d4 <xTaskIncrementTick+0x174>)
 8003298:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800329a:	4b0f      	ldr	r3, [pc, #60]	; (80032d8 <xTaskIncrementTick+0x178>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80032a2:	2301      	movs	r3, #1
 80032a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80032a6:	697b      	ldr	r3, [r7, #20]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3718      	adds	r7, #24
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	200018c4 	.word	0x200018c4
 80032b4:	200018a0 	.word	0x200018a0
 80032b8:	20001854 	.word	0x20001854
 80032bc:	20001858 	.word	0x20001858
 80032c0:	200018b4 	.word	0x200018b4
 80032c4:	200018bc 	.word	0x200018bc
 80032c8:	200018a4 	.word	0x200018a4
 80032cc:	200013cc 	.word	0x200013cc
 80032d0:	200013c8 	.word	0x200013c8
 80032d4:	200018ac 	.word	0x200018ac
 80032d8:	200018b0 	.word	0x200018b0

080032dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032e2:	4b27      	ldr	r3, [pc, #156]	; (8003380 <vTaskSwitchContext+0xa4>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80032ea:	4b26      	ldr	r3, [pc, #152]	; (8003384 <vTaskSwitchContext+0xa8>)
 80032ec:	2201      	movs	r2, #1
 80032ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80032f0:	e041      	b.n	8003376 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80032f2:	4b24      	ldr	r3, [pc, #144]	; (8003384 <vTaskSwitchContext+0xa8>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80032f8:	4b23      	ldr	r3, [pc, #140]	; (8003388 <vTaskSwitchContext+0xac>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	e010      	b.n	8003322 <vTaskSwitchContext+0x46>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10a      	bne.n	800331c <vTaskSwitchContext+0x40>
	__asm volatile
 8003306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330a:	f383 8811 	msr	BASEPRI, r3
 800330e:	f3bf 8f6f 	isb	sy
 8003312:	f3bf 8f4f 	dsb	sy
 8003316:	607b      	str	r3, [r7, #4]
}
 8003318:	bf00      	nop
 800331a:	e7fe      	b.n	800331a <vTaskSwitchContext+0x3e>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	3b01      	subs	r3, #1
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	491a      	ldr	r1, [pc, #104]	; (800338c <vTaskSwitchContext+0xb0>)
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	4613      	mov	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0e4      	beq.n	8003300 <vTaskSwitchContext+0x24>
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	4613      	mov	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4a12      	ldr	r2, [pc, #72]	; (800338c <vTaskSwitchContext+0xb0>)
 8003342:	4413      	add	r3, r2
 8003344:	60bb      	str	r3, [r7, #8]
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	605a      	str	r2, [r3, #4]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	3308      	adds	r3, #8
 8003358:	429a      	cmp	r2, r3
 800335a:	d104      	bne.n	8003366 <vTaskSwitchContext+0x8a>
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	605a      	str	r2, [r3, #4]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	4a08      	ldr	r2, [pc, #32]	; (8003390 <vTaskSwitchContext+0xb4>)
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	4a05      	ldr	r2, [pc, #20]	; (8003388 <vTaskSwitchContext+0xac>)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6013      	str	r3, [r2, #0]
}
 8003376:	bf00      	nop
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr
 8003380:	200018c4 	.word	0x200018c4
 8003384:	200018b0 	.word	0x200018b0
 8003388:	200018a4 	.word	0x200018a4
 800338c:	200013cc 	.word	0x200013cc
 8003390:	200013c8 	.word	0x200013c8

08003394 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10a      	bne.n	80033ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80033a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a8:	f383 8811 	msr	BASEPRI, r3
 80033ac:	f3bf 8f6f 	isb	sy
 80033b0:	f3bf 8f4f 	dsb	sy
 80033b4:	60fb      	str	r3, [r7, #12]
}
 80033b6:	bf00      	nop
 80033b8:	e7fe      	b.n	80033b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033ba:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <vTaskPlaceOnEventList+0x44>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	3318      	adds	r3, #24
 80033c0:	4619      	mov	r1, r3
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7fe fd90 	bl	8001ee8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80033c8:	2101      	movs	r1, #1
 80033ca:	6838      	ldr	r0, [r7, #0]
 80033cc:	f000 fa80 	bl	80038d0 <prvAddCurrentTaskToDelayedList>
}
 80033d0:	bf00      	nop
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	200013c8 	.word	0x200013c8

080033dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10a      	bne.n	8003404 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80033ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f2:	f383 8811 	msr	BASEPRI, r3
 80033f6:	f3bf 8f6f 	isb	sy
 80033fa:	f3bf 8f4f 	dsb	sy
 80033fe:	617b      	str	r3, [r7, #20]
}
 8003400:	bf00      	nop
 8003402:	e7fe      	b.n	8003402 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003404:	4b0a      	ldr	r3, [pc, #40]	; (8003430 <vTaskPlaceOnEventListRestricted+0x54>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3318      	adds	r3, #24
 800340a:	4619      	mov	r1, r3
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f7fe fd48 	bl	8001ea2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d002      	beq.n	800341e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003418:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800341c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	68b8      	ldr	r0, [r7, #8]
 8003422:	f000 fa55 	bl	80038d0 <prvAddCurrentTaskToDelayedList>
	}
 8003426:	bf00      	nop
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	200013c8 	.word	0x200013c8

08003434 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10a      	bne.n	8003460 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800344a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344e:	f383 8811 	msr	BASEPRI, r3
 8003452:	f3bf 8f6f 	isb	sy
 8003456:	f3bf 8f4f 	dsb	sy
 800345a:	60fb      	str	r3, [r7, #12]
}
 800345c:	bf00      	nop
 800345e:	e7fe      	b.n	800345e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	3318      	adds	r3, #24
 8003464:	4618      	mov	r0, r3
 8003466:	f7fe fd77 	bl	8001f58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800346a:	4b1e      	ldr	r3, [pc, #120]	; (80034e4 <xTaskRemoveFromEventList+0xb0>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d11d      	bne.n	80034ae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	3304      	adds	r3, #4
 8003476:	4618      	mov	r0, r3
 8003478:	f7fe fd6e 	bl	8001f58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003480:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <xTaskRemoveFromEventList+0xb4>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d903      	bls.n	8003490 <xTaskRemoveFromEventList+0x5c>
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348c:	4a16      	ldr	r2, [pc, #88]	; (80034e8 <xTaskRemoveFromEventList+0xb4>)
 800348e:	6013      	str	r3, [r2, #0]
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4a13      	ldr	r2, [pc, #76]	; (80034ec <xTaskRemoveFromEventList+0xb8>)
 800349e:	441a      	add	r2, r3
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	3304      	adds	r3, #4
 80034a4:	4619      	mov	r1, r3
 80034a6:	4610      	mov	r0, r2
 80034a8:	f7fe fcfb 	bl	8001ea2 <vListInsertEnd>
 80034ac:	e005      	b.n	80034ba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	3318      	adds	r3, #24
 80034b2:	4619      	mov	r1, r3
 80034b4:	480e      	ldr	r0, [pc, #56]	; (80034f0 <xTaskRemoveFromEventList+0xbc>)
 80034b6:	f7fe fcf4 	bl	8001ea2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034be:	4b0d      	ldr	r3, [pc, #52]	; (80034f4 <xTaskRemoveFromEventList+0xc0>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d905      	bls.n	80034d4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80034c8:	2301      	movs	r3, #1
 80034ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80034cc:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <xTaskRemoveFromEventList+0xc4>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	e001      	b.n	80034d8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80034d8:	697b      	ldr	r3, [r7, #20]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	200018c4 	.word	0x200018c4
 80034e8:	200018a4 	.word	0x200018a4
 80034ec:	200013cc 	.word	0x200013cc
 80034f0:	2000185c 	.word	0x2000185c
 80034f4:	200013c8 	.word	0x200013c8
 80034f8:	200018b0 	.word	0x200018b0

080034fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003504:	4b06      	ldr	r3, [pc, #24]	; (8003520 <vTaskInternalSetTimeOutState+0x24>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800350c:	4b05      	ldr	r3, [pc, #20]	; (8003524 <vTaskInternalSetTimeOutState+0x28>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	605a      	str	r2, [r3, #4]
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	bc80      	pop	{r7}
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	200018b4 	.word	0x200018b4
 8003524:	200018a0 	.word	0x200018a0

08003528 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b088      	sub	sp, #32
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10a      	bne.n	800354e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353c:	f383 8811 	msr	BASEPRI, r3
 8003540:	f3bf 8f6f 	isb	sy
 8003544:	f3bf 8f4f 	dsb	sy
 8003548:	613b      	str	r3, [r7, #16]
}
 800354a:	bf00      	nop
 800354c:	e7fe      	b.n	800354c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10a      	bne.n	800356a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003558:	f383 8811 	msr	BASEPRI, r3
 800355c:	f3bf 8f6f 	isb	sy
 8003560:	f3bf 8f4f 	dsb	sy
 8003564:	60fb      	str	r3, [r7, #12]
}
 8003566:	bf00      	nop
 8003568:	e7fe      	b.n	8003568 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800356a:	f000 fe07 	bl	800417c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800356e:	4b1d      	ldr	r3, [pc, #116]	; (80035e4 <xTaskCheckForTimeOut+0xbc>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003586:	d102      	bne.n	800358e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003588:	2300      	movs	r3, #0
 800358a:	61fb      	str	r3, [r7, #28]
 800358c:	e023      	b.n	80035d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	4b15      	ldr	r3, [pc, #84]	; (80035e8 <xTaskCheckForTimeOut+0xc0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d007      	beq.n	80035aa <xTaskCheckForTimeOut+0x82>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d302      	bcc.n	80035aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80035a4:	2301      	movs	r3, #1
 80035a6:	61fb      	str	r3, [r7, #28]
 80035a8:	e015      	b.n	80035d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d20b      	bcs.n	80035cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	1ad2      	subs	r2, r2, r3
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7ff ff9b 	bl	80034fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80035c6:	2300      	movs	r3, #0
 80035c8:	61fb      	str	r3, [r7, #28]
 80035ca:	e004      	b.n	80035d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80035d2:	2301      	movs	r3, #1
 80035d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80035d6:	f000 fe01 	bl	80041dc <vPortExitCritical>

	return xReturn;
 80035da:	69fb      	ldr	r3, [r7, #28]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3720      	adds	r7, #32
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	200018a0 	.word	0x200018a0
 80035e8:	200018b4 	.word	0x200018b4

080035ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80035f0:	4b03      	ldr	r3, [pc, #12]	; (8003600 <vTaskMissedYield+0x14>)
 80035f2:	2201      	movs	r2, #1
 80035f4:	601a      	str	r2, [r3, #0]
}
 80035f6:	bf00      	nop
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	200018b0 	.word	0x200018b0

08003604 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800360c:	f000 f852 	bl	80036b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003610:	4b06      	ldr	r3, [pc, #24]	; (800362c <prvIdleTask+0x28>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d9f9      	bls.n	800360c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003618:	4b05      	ldr	r3, [pc, #20]	; (8003630 <prvIdleTask+0x2c>)
 800361a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	f3bf 8f4f 	dsb	sy
 8003624:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003628:	e7f0      	b.n	800360c <prvIdleTask+0x8>
 800362a:	bf00      	nop
 800362c:	200013cc 	.word	0x200013cc
 8003630:	e000ed04 	.word	0xe000ed04

08003634 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800363a:	2300      	movs	r3, #0
 800363c:	607b      	str	r3, [r7, #4]
 800363e:	e00c      	b.n	800365a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	4613      	mov	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4a12      	ldr	r2, [pc, #72]	; (8003694 <prvInitialiseTaskLists+0x60>)
 800364c:	4413      	add	r3, r2
 800364e:	4618      	mov	r0, r3
 8003650:	f7fe fbfc 	bl	8001e4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3301      	adds	r3, #1
 8003658:	607b      	str	r3, [r7, #4]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b37      	cmp	r3, #55	; 0x37
 800365e:	d9ef      	bls.n	8003640 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003660:	480d      	ldr	r0, [pc, #52]	; (8003698 <prvInitialiseTaskLists+0x64>)
 8003662:	f7fe fbf3 	bl	8001e4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003666:	480d      	ldr	r0, [pc, #52]	; (800369c <prvInitialiseTaskLists+0x68>)
 8003668:	f7fe fbf0 	bl	8001e4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800366c:	480c      	ldr	r0, [pc, #48]	; (80036a0 <prvInitialiseTaskLists+0x6c>)
 800366e:	f7fe fbed 	bl	8001e4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003672:	480c      	ldr	r0, [pc, #48]	; (80036a4 <prvInitialiseTaskLists+0x70>)
 8003674:	f7fe fbea 	bl	8001e4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003678:	480b      	ldr	r0, [pc, #44]	; (80036a8 <prvInitialiseTaskLists+0x74>)
 800367a:	f7fe fbe7 	bl	8001e4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800367e:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <prvInitialiseTaskLists+0x78>)
 8003680:	4a05      	ldr	r2, [pc, #20]	; (8003698 <prvInitialiseTaskLists+0x64>)
 8003682:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003684:	4b0a      	ldr	r3, [pc, #40]	; (80036b0 <prvInitialiseTaskLists+0x7c>)
 8003686:	4a05      	ldr	r2, [pc, #20]	; (800369c <prvInitialiseTaskLists+0x68>)
 8003688:	601a      	str	r2, [r3, #0]
}
 800368a:	bf00      	nop
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	200013cc 	.word	0x200013cc
 8003698:	2000182c 	.word	0x2000182c
 800369c:	20001840 	.word	0x20001840
 80036a0:	2000185c 	.word	0x2000185c
 80036a4:	20001870 	.word	0x20001870
 80036a8:	20001888 	.word	0x20001888
 80036ac:	20001854 	.word	0x20001854
 80036b0:	20001858 	.word	0x20001858

080036b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036ba:	e019      	b.n	80036f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80036bc:	f000 fd5e 	bl	800417c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80036c0:	4b10      	ldr	r3, [pc, #64]	; (8003704 <prvCheckTasksWaitingTermination+0x50>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3304      	adds	r3, #4
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fe fc43 	bl	8001f58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80036d2:	4b0d      	ldr	r3, [pc, #52]	; (8003708 <prvCheckTasksWaitingTermination+0x54>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	4a0b      	ldr	r2, [pc, #44]	; (8003708 <prvCheckTasksWaitingTermination+0x54>)
 80036da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80036dc:	4b0b      	ldr	r3, [pc, #44]	; (800370c <prvCheckTasksWaitingTermination+0x58>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	3b01      	subs	r3, #1
 80036e2:	4a0a      	ldr	r2, [pc, #40]	; (800370c <prvCheckTasksWaitingTermination+0x58>)
 80036e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80036e6:	f000 fd79 	bl	80041dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f810 	bl	8003710 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036f0:	4b06      	ldr	r3, [pc, #24]	; (800370c <prvCheckTasksWaitingTermination+0x58>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1e1      	bne.n	80036bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80036f8:	bf00      	nop
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20001870 	.word	0x20001870
 8003708:	2000189c 	.word	0x2000189c
 800370c:	20001884 	.word	0x20001884

08003710 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800371e:	2b00      	cmp	r3, #0
 8003720:	d108      	bne.n	8003734 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	4618      	mov	r0, r3
 8003728:	f000 feec 	bl	8004504 <vPortFree>
				vPortFree( pxTCB );
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 fee9 	bl	8004504 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003732:	e018      	b.n	8003766 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800373a:	2b01      	cmp	r3, #1
 800373c:	d103      	bne.n	8003746 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fee0 	bl	8004504 <vPortFree>
	}
 8003744:	e00f      	b.n	8003766 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800374c:	2b02      	cmp	r3, #2
 800374e:	d00a      	beq.n	8003766 <prvDeleteTCB+0x56>
	__asm volatile
 8003750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003754:	f383 8811 	msr	BASEPRI, r3
 8003758:	f3bf 8f6f 	isb	sy
 800375c:	f3bf 8f4f 	dsb	sy
 8003760:	60fb      	str	r3, [r7, #12]
}
 8003762:	bf00      	nop
 8003764:	e7fe      	b.n	8003764 <prvDeleteTCB+0x54>
	}
 8003766:	bf00      	nop
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003776:	4b0e      	ldr	r3, [pc, #56]	; (80037b0 <prvResetNextTaskUnblockTime+0x40>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <prvResetNextTaskUnblockTime+0x14>
 8003780:	2301      	movs	r3, #1
 8003782:	e000      	b.n	8003786 <prvResetNextTaskUnblockTime+0x16>
 8003784:	2300      	movs	r3, #0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d004      	beq.n	8003794 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800378a:	4b0a      	ldr	r3, [pc, #40]	; (80037b4 <prvResetNextTaskUnblockTime+0x44>)
 800378c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003790:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003792:	e008      	b.n	80037a6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003794:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <prvResetNextTaskUnblockTime+0x40>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	4a04      	ldr	r2, [pc, #16]	; (80037b4 <prvResetNextTaskUnblockTime+0x44>)
 80037a4:	6013      	str	r3, [r2, #0]
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr
 80037b0:	20001854 	.word	0x20001854
 80037b4:	200018bc 	.word	0x200018bc

080037b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80037be:	4b0b      	ldr	r3, [pc, #44]	; (80037ec <xTaskGetSchedulerState+0x34>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d102      	bne.n	80037cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80037c6:	2301      	movs	r3, #1
 80037c8:	607b      	str	r3, [r7, #4]
 80037ca:	e008      	b.n	80037de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037cc:	4b08      	ldr	r3, [pc, #32]	; (80037f0 <xTaskGetSchedulerState+0x38>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d102      	bne.n	80037da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80037d4:	2302      	movs	r3, #2
 80037d6:	607b      	str	r3, [r7, #4]
 80037d8:	e001      	b.n	80037de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80037da:	2300      	movs	r3, #0
 80037dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80037de:	687b      	ldr	r3, [r7, #4]
	}
 80037e0:	4618      	mov	r0, r3
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bc80      	pop	{r7}
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	200018a8 	.word	0x200018a8
 80037f0:	200018c4 	.word	0x200018c4

080037f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d056      	beq.n	80038b8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800380a:	4b2e      	ldr	r3, [pc, #184]	; (80038c4 <xTaskPriorityDisinherit+0xd0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	429a      	cmp	r2, r3
 8003812:	d00a      	beq.n	800382a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003818:	f383 8811 	msr	BASEPRI, r3
 800381c:	f3bf 8f6f 	isb	sy
 8003820:	f3bf 8f4f 	dsb	sy
 8003824:	60fb      	str	r3, [r7, #12]
}
 8003826:	bf00      	nop
 8003828:	e7fe      	b.n	8003828 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10a      	bne.n	8003848 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003836:	f383 8811 	msr	BASEPRI, r3
 800383a:	f3bf 8f6f 	isb	sy
 800383e:	f3bf 8f4f 	dsb	sy
 8003842:	60bb      	str	r3, [r7, #8]
}
 8003844:	bf00      	nop
 8003846:	e7fe      	b.n	8003846 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800384c:	1e5a      	subs	r2, r3, #1
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385a:	429a      	cmp	r2, r3
 800385c:	d02c      	beq.n	80038b8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003862:	2b00      	cmp	r3, #0
 8003864:	d128      	bne.n	80038b8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	3304      	adds	r3, #4
 800386a:	4618      	mov	r0, r3
 800386c:	f7fe fb74 	bl	8001f58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003888:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <xTaskPriorityDisinherit+0xd4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d903      	bls.n	8003898 <xTaskPriorityDisinherit+0xa4>
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	4a0c      	ldr	r2, [pc, #48]	; (80038c8 <xTaskPriorityDisinherit+0xd4>)
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800389c:	4613      	mov	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4a09      	ldr	r2, [pc, #36]	; (80038cc <xTaskPriorityDisinherit+0xd8>)
 80038a6:	441a      	add	r2, r3
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	3304      	adds	r3, #4
 80038ac:	4619      	mov	r1, r3
 80038ae:	4610      	mov	r0, r2
 80038b0:	f7fe faf7 	bl	8001ea2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80038b4:	2301      	movs	r3, #1
 80038b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80038b8:	697b      	ldr	r3, [r7, #20]
	}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	200013c8 	.word	0x200013c8
 80038c8:	200018a4 	.word	0x200018a4
 80038cc:	200013cc 	.word	0x200013cc

080038d0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80038da:	4b21      	ldr	r3, [pc, #132]	; (8003960 <prvAddCurrentTaskToDelayedList+0x90>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038e0:	4b20      	ldr	r3, [pc, #128]	; (8003964 <prvAddCurrentTaskToDelayedList+0x94>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3304      	adds	r3, #4
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fe fb36 	bl	8001f58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038f2:	d10a      	bne.n	800390a <prvAddCurrentTaskToDelayedList+0x3a>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d007      	beq.n	800390a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038fa:	4b1a      	ldr	r3, [pc, #104]	; (8003964 <prvAddCurrentTaskToDelayedList+0x94>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	3304      	adds	r3, #4
 8003900:	4619      	mov	r1, r3
 8003902:	4819      	ldr	r0, [pc, #100]	; (8003968 <prvAddCurrentTaskToDelayedList+0x98>)
 8003904:	f7fe facd 	bl	8001ea2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003908:	e026      	b.n	8003958 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4413      	add	r3, r2
 8003910:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003912:	4b14      	ldr	r3, [pc, #80]	; (8003964 <prvAddCurrentTaskToDelayedList+0x94>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	429a      	cmp	r2, r3
 8003920:	d209      	bcs.n	8003936 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003922:	4b12      	ldr	r3, [pc, #72]	; (800396c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	4b0f      	ldr	r3, [pc, #60]	; (8003964 <prvAddCurrentTaskToDelayedList+0x94>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	3304      	adds	r3, #4
 800392c:	4619      	mov	r1, r3
 800392e:	4610      	mov	r0, r2
 8003930:	f7fe fada 	bl	8001ee8 <vListInsert>
}
 8003934:	e010      	b.n	8003958 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003936:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	4b0a      	ldr	r3, [pc, #40]	; (8003964 <prvAddCurrentTaskToDelayedList+0x94>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	3304      	adds	r3, #4
 8003940:	4619      	mov	r1, r3
 8003942:	4610      	mov	r0, r2
 8003944:	f7fe fad0 	bl	8001ee8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003948:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <prvAddCurrentTaskToDelayedList+0xa4>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	429a      	cmp	r2, r3
 8003950:	d202      	bcs.n	8003958 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003952:	4a08      	ldr	r2, [pc, #32]	; (8003974 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	6013      	str	r3, [r2, #0]
}
 8003958:	bf00      	nop
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	200018a0 	.word	0x200018a0
 8003964:	200013c8 	.word	0x200013c8
 8003968:	20001888 	.word	0x20001888
 800396c:	20001858 	.word	0x20001858
 8003970:	20001854 	.word	0x20001854
 8003974:	200018bc 	.word	0x200018bc

08003978 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08a      	sub	sp, #40	; 0x28
 800397c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800397e:	2300      	movs	r3, #0
 8003980:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003982:	f000 facb 	bl	8003f1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003986:	4b1c      	ldr	r3, [pc, #112]	; (80039f8 <xTimerCreateTimerTask+0x80>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d021      	beq.n	80039d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003992:	2300      	movs	r3, #0
 8003994:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003996:	1d3a      	adds	r2, r7, #4
 8003998:	f107 0108 	add.w	r1, r7, #8
 800399c:	f107 030c 	add.w	r3, r7, #12
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fe fa39 	bl	8001e18 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	9202      	str	r2, [sp, #8]
 80039ae:	9301      	str	r3, [sp, #4]
 80039b0:	2302      	movs	r3, #2
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	2300      	movs	r3, #0
 80039b6:	460a      	mov	r2, r1
 80039b8:	4910      	ldr	r1, [pc, #64]	; (80039fc <xTimerCreateTimerTask+0x84>)
 80039ba:	4811      	ldr	r0, [pc, #68]	; (8003a00 <xTimerCreateTimerTask+0x88>)
 80039bc:	f7ff f818 	bl	80029f0 <xTaskCreateStatic>
 80039c0:	4603      	mov	r3, r0
 80039c2:	4a10      	ldr	r2, [pc, #64]	; (8003a04 <xTimerCreateTimerTask+0x8c>)
 80039c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80039c6:	4b0f      	ldr	r3, [pc, #60]	; (8003a04 <xTimerCreateTimerTask+0x8c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80039ce:	2301      	movs	r3, #1
 80039d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10a      	bne.n	80039ee <xTimerCreateTimerTask+0x76>
	__asm volatile
 80039d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039dc:	f383 8811 	msr	BASEPRI, r3
 80039e0:	f3bf 8f6f 	isb	sy
 80039e4:	f3bf 8f4f 	dsb	sy
 80039e8:	613b      	str	r3, [r7, #16]
}
 80039ea:	bf00      	nop
 80039ec:	e7fe      	b.n	80039ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80039ee:	697b      	ldr	r3, [r7, #20]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3718      	adds	r7, #24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	200018f8 	.word	0x200018f8
 80039fc:	0800481c 	.word	0x0800481c
 8003a00:	08003b25 	.word	0x08003b25
 8003a04:	200018fc 	.word	0x200018fc

08003a08 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b08a      	sub	sp, #40	; 0x28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003a16:	2300      	movs	r3, #0
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10a      	bne.n	8003a36 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a24:	f383 8811 	msr	BASEPRI, r3
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	623b      	str	r3, [r7, #32]
}
 8003a32:	bf00      	nop
 8003a34:	e7fe      	b.n	8003a34 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003a36:	4b1a      	ldr	r3, [pc, #104]	; (8003aa0 <xTimerGenericCommand+0x98>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d02a      	beq.n	8003a94 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2b05      	cmp	r3, #5
 8003a4e:	dc18      	bgt.n	8003a82 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a50:	f7ff feb2 	bl	80037b8 <xTaskGetSchedulerState>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d109      	bne.n	8003a6e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a5a:	4b11      	ldr	r3, [pc, #68]	; (8003aa0 <xTimerGenericCommand+0x98>)
 8003a5c:	6818      	ldr	r0, [r3, #0]
 8003a5e:	f107 0110 	add.w	r1, r7, #16
 8003a62:	2300      	movs	r3, #0
 8003a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a66:	f7fe fbe1 	bl	800222c <xQueueGenericSend>
 8003a6a:	6278      	str	r0, [r7, #36]	; 0x24
 8003a6c:	e012      	b.n	8003a94 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003a6e:	4b0c      	ldr	r3, [pc, #48]	; (8003aa0 <xTimerGenericCommand+0x98>)
 8003a70:	6818      	ldr	r0, [r3, #0]
 8003a72:	f107 0110 	add.w	r1, r7, #16
 8003a76:	2300      	movs	r3, #0
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f7fe fbd7 	bl	800222c <xQueueGenericSend>
 8003a7e:	6278      	str	r0, [r7, #36]	; 0x24
 8003a80:	e008      	b.n	8003a94 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003a82:	4b07      	ldr	r3, [pc, #28]	; (8003aa0 <xTimerGenericCommand+0x98>)
 8003a84:	6818      	ldr	r0, [r3, #0]
 8003a86:	f107 0110 	add.w	r1, r7, #16
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	f7fe fccb 	bl	8002428 <xQueueGenericSendFromISR>
 8003a92:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3728      	adds	r7, #40	; 0x28
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	200018f8 	.word	0x200018f8

08003aa4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b088      	sub	sp, #32
 8003aa8:	af02      	add	r7, sp, #8
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003aae:	4b1c      	ldr	r3, [pc, #112]	; (8003b20 <prvProcessExpiredTimer+0x7c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	3304      	adds	r3, #4
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fe fa4b 	bl	8001f58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d122      	bne.n	8003b10 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	699a      	ldr	r2, [r3, #24]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	18d1      	adds	r1, r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	6978      	ldr	r0, [r7, #20]
 8003ad8:	f000 f8c8 	bl	8003c6c <prvInsertTimerInActiveList>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d016      	beq.n	8003b10 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	2100      	movs	r1, #0
 8003aec:	6978      	ldr	r0, [r7, #20]
 8003aee:	f7ff ff8b 	bl	8003a08 <xTimerGenericCommand>
 8003af2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10a      	bne.n	8003b10 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8003afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afe:	f383 8811 	msr	BASEPRI, r3
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	f3bf 8f4f 	dsb	sy
 8003b0a:	60fb      	str	r3, [r7, #12]
}
 8003b0c:	bf00      	nop
 8003b0e:	e7fe      	b.n	8003b0e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	6978      	ldr	r0, [r7, #20]
 8003b16:	4798      	blx	r3
}
 8003b18:	bf00      	nop
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	200018f0 	.word	0x200018f0

08003b24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b2c:	f107 0308 	add.w	r3, r7, #8
 8003b30:	4618      	mov	r0, r3
 8003b32:	f000 f857 	bl	8003be4 <prvGetNextExpireTime>
 8003b36:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f000 f803 	bl	8003b48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003b42:	f000 f8d5 	bl	8003cf0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b46:	e7f1      	b.n	8003b2c <prvTimerTask+0x8>

08003b48 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003b52:	f7ff fa4b 	bl	8002fec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b56:	f107 0308 	add.w	r3, r7, #8
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 f866 	bl	8003c2c <prvSampleTimeNow>
 8003b60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d130      	bne.n	8003bca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10a      	bne.n	8003b84 <prvProcessTimerOrBlockTask+0x3c>
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d806      	bhi.n	8003b84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003b76:	f7ff fa47 	bl	8003008 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003b7a:	68f9      	ldr	r1, [r7, #12]
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7ff ff91 	bl	8003aa4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003b82:	e024      	b.n	8003bce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d008      	beq.n	8003b9c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b8a:	4b13      	ldr	r3, [pc, #76]	; (8003bd8 <prvProcessTimerOrBlockTask+0x90>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	bf0c      	ite	eq
 8003b94:	2301      	moveq	r3, #1
 8003b96:	2300      	movne	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003b9c:	4b0f      	ldr	r3, [pc, #60]	; (8003bdc <prvProcessTimerOrBlockTask+0x94>)
 8003b9e:	6818      	ldr	r0, [r3, #0]
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	4619      	mov	r1, r3
 8003baa:	f7fe feed 	bl	8002988 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003bae:	f7ff fa2b 	bl	8003008 <xTaskResumeAll>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10a      	bne.n	8003bce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003bb8:	4b09      	ldr	r3, [pc, #36]	; (8003be0 <prvProcessTimerOrBlockTask+0x98>)
 8003bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	f3bf 8f6f 	isb	sy
}
 8003bc8:	e001      	b.n	8003bce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003bca:	f7ff fa1d 	bl	8003008 <xTaskResumeAll>
}
 8003bce:	bf00      	nop
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	200018f4 	.word	0x200018f4
 8003bdc:	200018f8 	.word	0x200018f8
 8003be0:	e000ed04 	.word	0xe000ed04

08003be4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003bec:	4b0e      	ldr	r3, [pc, #56]	; (8003c28 <prvGetNextExpireTime+0x44>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	bf0c      	ite	eq
 8003bf6:	2301      	moveq	r3, #1
 8003bf8:	2300      	movne	r3, #0
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d105      	bne.n	8003c16 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c0a:	4b07      	ldr	r3, [pc, #28]	; (8003c28 <prvGetNextExpireTime+0x44>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	e001      	b.n	8003c1a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bc80      	pop	{r7}
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	200018f0 	.word	0x200018f0

08003c2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003c34:	f7ff fa86 	bl	8003144 <xTaskGetTickCount>
 8003c38:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003c3a:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <prvSampleTimeNow+0x3c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d205      	bcs.n	8003c50 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003c44:	f000 f908 	bl	8003e58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	e002      	b.n	8003c56 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003c56:	4a04      	ldr	r2, [pc, #16]	; (8003c68 <prvSampleTimeNow+0x3c>)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	20001900 	.word	0x20001900

08003c6c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
 8003c78:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d812      	bhi.n	8003cb8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	1ad2      	subs	r2, r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d302      	bcc.n	8003ca6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	e01b      	b.n	8003cde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003ca6:	4b10      	ldr	r3, [pc, #64]	; (8003ce8 <prvInsertTimerInActiveList+0x7c>)
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	3304      	adds	r3, #4
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	f7fe f919 	bl	8001ee8 <vListInsert>
 8003cb6:	e012      	b.n	8003cde <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d206      	bcs.n	8003cce <prvInsertTimerInActiveList+0x62>
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d302      	bcc.n	8003cce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	e007      	b.n	8003cde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003cce:	4b07      	ldr	r3, [pc, #28]	; (8003cec <prvInsertTimerInActiveList+0x80>)
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4610      	mov	r0, r2
 8003cda:	f7fe f905 	bl	8001ee8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003cde:	697b      	ldr	r3, [r7, #20]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3718      	adds	r7, #24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	200018f4 	.word	0x200018f4
 8003cec:	200018f0 	.word	0x200018f0

08003cf0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08e      	sub	sp, #56	; 0x38
 8003cf4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003cf6:	e09d      	b.n	8003e34 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	da18      	bge.n	8003d30 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003cfe:	1d3b      	adds	r3, r7, #4
 8003d00:	3304      	adds	r3, #4
 8003d02:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10a      	bne.n	8003d20 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0e:	f383 8811 	msr	BASEPRI, r3
 8003d12:	f3bf 8f6f 	isb	sy
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	61fb      	str	r3, [r7, #28]
}
 8003d1c:	bf00      	nop
 8003d1e:	e7fe      	b.n	8003d1e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d26:	6850      	ldr	r0, [r2, #4]
 8003d28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d2a:	6892      	ldr	r2, [r2, #8]
 8003d2c:	4611      	mov	r1, r2
 8003d2e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	db7e      	blt.n	8003e34 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d004      	beq.n	8003d4c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d44:	3304      	adds	r3, #4
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fe f906 	bl	8001f58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d4c:	463b      	mov	r3, r7
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff ff6c 	bl	8003c2c <prvSampleTimeNow>
 8003d54:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b09      	cmp	r3, #9
 8003d5a:	d86a      	bhi.n	8003e32 <prvProcessReceivedCommands+0x142>
 8003d5c:	a201      	add	r2, pc, #4	; (adr r2, 8003d64 <prvProcessReceivedCommands+0x74>)
 8003d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d62:	bf00      	nop
 8003d64:	08003d8d 	.word	0x08003d8d
 8003d68:	08003d8d 	.word	0x08003d8d
 8003d6c:	08003d8d 	.word	0x08003d8d
 8003d70:	08003e35 	.word	0x08003e35
 8003d74:	08003de9 	.word	0x08003de9
 8003d78:	08003e21 	.word	0x08003e21
 8003d7c:	08003d8d 	.word	0x08003d8d
 8003d80:	08003d8d 	.word	0x08003d8d
 8003d84:	08003e35 	.word	0x08003e35
 8003d88:	08003de9 	.word	0x08003de9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	18d1      	adds	r1, r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d9a:	f7ff ff67 	bl	8003c6c <prvInsertTimerInActiveList>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d047      	beq.n	8003e34 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003daa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dae:	69db      	ldr	r3, [r3, #28]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d13f      	bne.n	8003e34 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	441a      	add	r2, r3
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dc6:	f7ff fe1f 	bl	8003a08 <xTimerGenericCommand>
 8003dca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d130      	bne.n	8003e34 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8003dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd6:	f383 8811 	msr	BASEPRI, r3
 8003dda:	f3bf 8f6f 	isb	sy
 8003dde:	f3bf 8f4f 	dsb	sy
 8003de2:	61bb      	str	r3, [r7, #24]
}
 8003de4:	bf00      	nop
 8003de6:	e7fe      	b.n	8003de6 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10a      	bne.n	8003e0c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8003df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfa:	f383 8811 	msr	BASEPRI, r3
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	617b      	str	r3, [r7, #20]
}
 8003e08:	bf00      	nop
 8003e0a:	e7fe      	b.n	8003e0a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0e:	699a      	ldr	r2, [r3, #24]
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	18d1      	adds	r1, r2, r3
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e1a:	f7ff ff27 	bl	8003c6c <prvInsertTimerInActiveList>
					break;
 8003e1e:	e009      	b.n	8003e34 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d104      	bne.n	8003e34 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8003e2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e2c:	f000 fb6a 	bl	8004504 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003e30:	e000      	b.n	8003e34 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8003e32:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e34:	4b07      	ldr	r3, [pc, #28]	; (8003e54 <prvProcessReceivedCommands+0x164>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	1d39      	adds	r1, r7, #4
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7fe fb8b 	bl	8002558 <xQueueReceive>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f47f af57 	bne.w	8003cf8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003e4a:	bf00      	nop
 8003e4c:	bf00      	nop
 8003e4e:	3730      	adds	r7, #48	; 0x30
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	200018f8 	.word	0x200018f8

08003e58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e5e:	e045      	b.n	8003eec <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e60:	4b2c      	ldr	r3, [pc, #176]	; (8003f14 <prvSwitchTimerLists+0xbc>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e6a:	4b2a      	ldr	r3, [pc, #168]	; (8003f14 <prvSwitchTimerLists+0xbc>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	3304      	adds	r3, #4
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fe f86d 	bl	8001f58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d12e      	bne.n	8003eec <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	4413      	add	r3, r2
 8003e96:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d90e      	bls.n	8003ebe <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003eac:	4b19      	ldr	r3, [pc, #100]	; (8003f14 <prvSwitchTimerLists+0xbc>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	f7fe f816 	bl	8001ee8 <vListInsert>
 8003ebc:	e016      	b.n	8003eec <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f7ff fd9d 	bl	8003a08 <xTimerGenericCommand>
 8003ece:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10a      	bne.n	8003eec <prvSwitchTimerLists+0x94>
	__asm volatile
 8003ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eda:	f383 8811 	msr	BASEPRI, r3
 8003ede:	f3bf 8f6f 	isb	sy
 8003ee2:	f3bf 8f4f 	dsb	sy
 8003ee6:	603b      	str	r3, [r7, #0]
}
 8003ee8:	bf00      	nop
 8003eea:	e7fe      	b.n	8003eea <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003eec:	4b09      	ldr	r3, [pc, #36]	; (8003f14 <prvSwitchTimerLists+0xbc>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1b4      	bne.n	8003e60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003ef6:	4b07      	ldr	r3, [pc, #28]	; (8003f14 <prvSwitchTimerLists+0xbc>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003efc:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <prvSwitchTimerLists+0xc0>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a04      	ldr	r2, [pc, #16]	; (8003f14 <prvSwitchTimerLists+0xbc>)
 8003f02:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003f04:	4a04      	ldr	r2, [pc, #16]	; (8003f18 <prvSwitchTimerLists+0xc0>)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	6013      	str	r3, [r2, #0]
}
 8003f0a:	bf00      	nop
 8003f0c:	3718      	adds	r7, #24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	200018f0 	.word	0x200018f0
 8003f18:	200018f4 	.word	0x200018f4

08003f1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003f22:	f000 f92b 	bl	800417c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003f26:	4b15      	ldr	r3, [pc, #84]	; (8003f7c <prvCheckForValidListAndQueue+0x60>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d120      	bne.n	8003f70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003f2e:	4814      	ldr	r0, [pc, #80]	; (8003f80 <prvCheckForValidListAndQueue+0x64>)
 8003f30:	f7fd ff8c 	bl	8001e4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003f34:	4813      	ldr	r0, [pc, #76]	; (8003f84 <prvCheckForValidListAndQueue+0x68>)
 8003f36:	f7fd ff89 	bl	8001e4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003f3a:	4b13      	ldr	r3, [pc, #76]	; (8003f88 <prvCheckForValidListAndQueue+0x6c>)
 8003f3c:	4a10      	ldr	r2, [pc, #64]	; (8003f80 <prvCheckForValidListAndQueue+0x64>)
 8003f3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003f40:	4b12      	ldr	r3, [pc, #72]	; (8003f8c <prvCheckForValidListAndQueue+0x70>)
 8003f42:	4a10      	ldr	r2, [pc, #64]	; (8003f84 <prvCheckForValidListAndQueue+0x68>)
 8003f44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003f46:	2300      	movs	r3, #0
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	4b11      	ldr	r3, [pc, #68]	; (8003f90 <prvCheckForValidListAndQueue+0x74>)
 8003f4c:	4a11      	ldr	r2, [pc, #68]	; (8003f94 <prvCheckForValidListAndQueue+0x78>)
 8003f4e:	2110      	movs	r1, #16
 8003f50:	200a      	movs	r0, #10
 8003f52:	f7fe f893 	bl	800207c <xQueueGenericCreateStatic>
 8003f56:	4603      	mov	r3, r0
 8003f58:	4a08      	ldr	r2, [pc, #32]	; (8003f7c <prvCheckForValidListAndQueue+0x60>)
 8003f5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003f5c:	4b07      	ldr	r3, [pc, #28]	; (8003f7c <prvCheckForValidListAndQueue+0x60>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d005      	beq.n	8003f70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003f64:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <prvCheckForValidListAndQueue+0x60>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	490b      	ldr	r1, [pc, #44]	; (8003f98 <prvCheckForValidListAndQueue+0x7c>)
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fe fce4 	bl	8002938 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f70:	f000 f934 	bl	80041dc <vPortExitCritical>
}
 8003f74:	bf00      	nop
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	200018f8 	.word	0x200018f8
 8003f80:	200018c8 	.word	0x200018c8
 8003f84:	200018dc 	.word	0x200018dc
 8003f88:	200018f0 	.word	0x200018f0
 8003f8c:	200018f4 	.word	0x200018f4
 8003f90:	200019a4 	.word	0x200019a4
 8003f94:	20001904 	.word	0x20001904
 8003f98:	08004824 	.word	0x08004824

08003f9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	3b04      	subs	r3, #4
 8003fac:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	3b04      	subs	r3, #4
 8003fba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f023 0201 	bic.w	r2, r3, #1
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	3b04      	subs	r3, #4
 8003fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003fcc:	4a08      	ldr	r2, [pc, #32]	; (8003ff0 <pxPortInitialiseStack+0x54>)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	3b14      	subs	r3, #20
 8003fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3b20      	subs	r3, #32
 8003fe2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bc80      	pop	{r7}
 8003fee:	4770      	bx	lr
 8003ff0:	08003ff5 	.word	0x08003ff5

08003ff4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003ffe:	4b12      	ldr	r3, [pc, #72]	; (8004048 <prvTaskExitError+0x54>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004006:	d00a      	beq.n	800401e <prvTaskExitError+0x2a>
	__asm volatile
 8004008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400c:	f383 8811 	msr	BASEPRI, r3
 8004010:	f3bf 8f6f 	isb	sy
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	60fb      	str	r3, [r7, #12]
}
 800401a:	bf00      	nop
 800401c:	e7fe      	b.n	800401c <prvTaskExitError+0x28>
	__asm volatile
 800401e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004022:	f383 8811 	msr	BASEPRI, r3
 8004026:	f3bf 8f6f 	isb	sy
 800402a:	f3bf 8f4f 	dsb	sy
 800402e:	60bb      	str	r3, [r7, #8]
}
 8004030:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004032:	bf00      	nop
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d0fc      	beq.n	8004034 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800403a:	bf00      	nop
 800403c:	bf00      	nop
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	bc80      	pop	{r7}
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	2000000c 	.word	0x2000000c
 800404c:	00000000 	.word	0x00000000

08004050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004050:	4b07      	ldr	r3, [pc, #28]	; (8004070 <pxCurrentTCBConst2>)
 8004052:	6819      	ldr	r1, [r3, #0]
 8004054:	6808      	ldr	r0, [r1, #0]
 8004056:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800405a:	f380 8809 	msr	PSP, r0
 800405e:	f3bf 8f6f 	isb	sy
 8004062:	f04f 0000 	mov.w	r0, #0
 8004066:	f380 8811 	msr	BASEPRI, r0
 800406a:	f04e 0e0d 	orr.w	lr, lr, #13
 800406e:	4770      	bx	lr

08004070 <pxCurrentTCBConst2>:
 8004070:	200013c8 	.word	0x200013c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004074:	bf00      	nop
 8004076:	bf00      	nop

08004078 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004078:	4806      	ldr	r0, [pc, #24]	; (8004094 <prvPortStartFirstTask+0x1c>)
 800407a:	6800      	ldr	r0, [r0, #0]
 800407c:	6800      	ldr	r0, [r0, #0]
 800407e:	f380 8808 	msr	MSP, r0
 8004082:	b662      	cpsie	i
 8004084:	b661      	cpsie	f
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	f3bf 8f6f 	isb	sy
 800408e:	df00      	svc	0
 8004090:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004092:	bf00      	nop
 8004094:	e000ed08 	.word	0xe000ed08

08004098 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800409e:	4b32      	ldr	r3, [pc, #200]	; (8004168 <xPortStartScheduler+0xd0>)
 80040a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	22ff      	movs	r2, #255	; 0xff
 80040ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	4b2a      	ldr	r3, [pc, #168]	; (800416c <xPortStartScheduler+0xd4>)
 80040c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80040c6:	4b2a      	ldr	r3, [pc, #168]	; (8004170 <xPortStartScheduler+0xd8>)
 80040c8:	2207      	movs	r2, #7
 80040ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040cc:	e009      	b.n	80040e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80040ce:	4b28      	ldr	r3, [pc, #160]	; (8004170 <xPortStartScheduler+0xd8>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	4a26      	ldr	r2, [pc, #152]	; (8004170 <xPortStartScheduler+0xd8>)
 80040d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80040d8:	78fb      	ldrb	r3, [r7, #3]
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040e2:	78fb      	ldrb	r3, [r7, #3]
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ea:	2b80      	cmp	r3, #128	; 0x80
 80040ec:	d0ef      	beq.n	80040ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80040ee:	4b20      	ldr	r3, [pc, #128]	; (8004170 <xPortStartScheduler+0xd8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f1c3 0307 	rsb	r3, r3, #7
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d00a      	beq.n	8004110 <xPortStartScheduler+0x78>
	__asm volatile
 80040fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fe:	f383 8811 	msr	BASEPRI, r3
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	f3bf 8f4f 	dsb	sy
 800410a:	60bb      	str	r3, [r7, #8]
}
 800410c:	bf00      	nop
 800410e:	e7fe      	b.n	800410e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004110:	4b17      	ldr	r3, [pc, #92]	; (8004170 <xPortStartScheduler+0xd8>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	021b      	lsls	r3, r3, #8
 8004116:	4a16      	ldr	r2, [pc, #88]	; (8004170 <xPortStartScheduler+0xd8>)
 8004118:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800411a:	4b15      	ldr	r3, [pc, #84]	; (8004170 <xPortStartScheduler+0xd8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004122:	4a13      	ldr	r2, [pc, #76]	; (8004170 <xPortStartScheduler+0xd8>)
 8004124:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	b2da      	uxtb	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800412e:	4b11      	ldr	r3, [pc, #68]	; (8004174 <xPortStartScheduler+0xdc>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a10      	ldr	r2, [pc, #64]	; (8004174 <xPortStartScheduler+0xdc>)
 8004134:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004138:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800413a:	4b0e      	ldr	r3, [pc, #56]	; (8004174 <xPortStartScheduler+0xdc>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a0d      	ldr	r2, [pc, #52]	; (8004174 <xPortStartScheduler+0xdc>)
 8004140:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004144:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004146:	f000 f8b9 	bl	80042bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800414a:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <xPortStartScheduler+0xe0>)
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004150:	f7ff ff92 	bl	8004078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004154:	f7ff f8c2 	bl	80032dc <vTaskSwitchContext>
	prvTaskExitError();
 8004158:	f7ff ff4c 	bl	8003ff4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	e000e400 	.word	0xe000e400
 800416c:	200019f4 	.word	0x200019f4
 8004170:	200019f8 	.word	0x200019f8
 8004174:	e000ed20 	.word	0xe000ed20
 8004178:	2000000c 	.word	0x2000000c

0800417c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
	__asm volatile
 8004182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	607b      	str	r3, [r7, #4]
}
 8004194:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004196:	4b0f      	ldr	r3, [pc, #60]	; (80041d4 <vPortEnterCritical+0x58>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3301      	adds	r3, #1
 800419c:	4a0d      	ldr	r2, [pc, #52]	; (80041d4 <vPortEnterCritical+0x58>)
 800419e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80041a0:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <vPortEnterCritical+0x58>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d10f      	bne.n	80041c8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80041a8:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <vPortEnterCritical+0x5c>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <vPortEnterCritical+0x4c>
	__asm volatile
 80041b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b6:	f383 8811 	msr	BASEPRI, r3
 80041ba:	f3bf 8f6f 	isb	sy
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	603b      	str	r3, [r7, #0]
}
 80041c4:	bf00      	nop
 80041c6:	e7fe      	b.n	80041c6 <vPortEnterCritical+0x4a>
	}
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bc80      	pop	{r7}
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	2000000c 	.word	0x2000000c
 80041d8:	e000ed04 	.word	0xe000ed04

080041dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80041e2:	4b11      	ldr	r3, [pc, #68]	; (8004228 <vPortExitCritical+0x4c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10a      	bne.n	8004200 <vPortExitCritical+0x24>
	__asm volatile
 80041ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ee:	f383 8811 	msr	BASEPRI, r3
 80041f2:	f3bf 8f6f 	isb	sy
 80041f6:	f3bf 8f4f 	dsb	sy
 80041fa:	607b      	str	r3, [r7, #4]
}
 80041fc:	bf00      	nop
 80041fe:	e7fe      	b.n	80041fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004200:	4b09      	ldr	r3, [pc, #36]	; (8004228 <vPortExitCritical+0x4c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3b01      	subs	r3, #1
 8004206:	4a08      	ldr	r2, [pc, #32]	; (8004228 <vPortExitCritical+0x4c>)
 8004208:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800420a:	4b07      	ldr	r3, [pc, #28]	; (8004228 <vPortExitCritical+0x4c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d105      	bne.n	800421e <vPortExitCritical+0x42>
 8004212:	2300      	movs	r3, #0
 8004214:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	f383 8811 	msr	BASEPRI, r3
}
 800421c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	bc80      	pop	{r7}
 8004226:	4770      	bx	lr
 8004228:	2000000c 	.word	0x2000000c
 800422c:	00000000 	.word	0x00000000

08004230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004230:	f3ef 8009 	mrs	r0, PSP
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	4b0d      	ldr	r3, [pc, #52]	; (8004270 <pxCurrentTCBConst>)
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004240:	6010      	str	r0, [r2, #0]
 8004242:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004246:	f04f 0050 	mov.w	r0, #80	; 0x50
 800424a:	f380 8811 	msr	BASEPRI, r0
 800424e:	f7ff f845 	bl	80032dc <vTaskSwitchContext>
 8004252:	f04f 0000 	mov.w	r0, #0
 8004256:	f380 8811 	msr	BASEPRI, r0
 800425a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800425e:	6819      	ldr	r1, [r3, #0]
 8004260:	6808      	ldr	r0, [r1, #0]
 8004262:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004266:	f380 8809 	msr	PSP, r0
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	4770      	bx	lr

08004270 <pxCurrentTCBConst>:
 8004270:	200013c8 	.word	0x200013c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004274:	bf00      	nop
 8004276:	bf00      	nop

08004278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
	__asm volatile
 800427e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004282:	f383 8811 	msr	BASEPRI, r3
 8004286:	f3bf 8f6f 	isb	sy
 800428a:	f3bf 8f4f 	dsb	sy
 800428e:	607b      	str	r3, [r7, #4]
}
 8004290:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004292:	f7fe ff65 	bl	8003160 <xTaskIncrementTick>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800429c:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <SysTick_Handler+0x40>)
 800429e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	2300      	movs	r3, #0
 80042a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	f383 8811 	msr	BASEPRI, r3
}
 80042ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80042b0:	bf00      	nop
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	e000ed04 	.word	0xe000ed04

080042bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80042c0:	4b0a      	ldr	r3, [pc, #40]	; (80042ec <vPortSetupTimerInterrupt+0x30>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80042c6:	4b0a      	ldr	r3, [pc, #40]	; (80042f0 <vPortSetupTimerInterrupt+0x34>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80042cc:	4b09      	ldr	r3, [pc, #36]	; (80042f4 <vPortSetupTimerInterrupt+0x38>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a09      	ldr	r2, [pc, #36]	; (80042f8 <vPortSetupTimerInterrupt+0x3c>)
 80042d2:	fba2 2303 	umull	r2, r3, r2, r3
 80042d6:	099b      	lsrs	r3, r3, #6
 80042d8:	4a08      	ldr	r2, [pc, #32]	; (80042fc <vPortSetupTimerInterrupt+0x40>)
 80042da:	3b01      	subs	r3, #1
 80042dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80042de:	4b03      	ldr	r3, [pc, #12]	; (80042ec <vPortSetupTimerInterrupt+0x30>)
 80042e0:	2207      	movs	r2, #7
 80042e2:	601a      	str	r2, [r3, #0]
}
 80042e4:	bf00      	nop
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bc80      	pop	{r7}
 80042ea:	4770      	bx	lr
 80042ec:	e000e010 	.word	0xe000e010
 80042f0:	e000e018 	.word	0xe000e018
 80042f4:	20000000 	.word	0x20000000
 80042f8:	10624dd3 	.word	0x10624dd3
 80042fc:	e000e014 	.word	0xe000e014

08004300 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004306:	f3ef 8305 	mrs	r3, IPSR
 800430a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2b0f      	cmp	r3, #15
 8004310:	d914      	bls.n	800433c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004312:	4a16      	ldr	r2, [pc, #88]	; (800436c <vPortValidateInterruptPriority+0x6c>)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4413      	add	r3, r2
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800431c:	4b14      	ldr	r3, [pc, #80]	; (8004370 <vPortValidateInterruptPriority+0x70>)
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	7afa      	ldrb	r2, [r7, #11]
 8004322:	429a      	cmp	r2, r3
 8004324:	d20a      	bcs.n	800433c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	607b      	str	r3, [r7, #4]
}
 8004338:	bf00      	nop
 800433a:	e7fe      	b.n	800433a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800433c:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <vPortValidateInterruptPriority+0x74>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004344:	4b0c      	ldr	r3, [pc, #48]	; (8004378 <vPortValidateInterruptPriority+0x78>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	429a      	cmp	r2, r3
 800434a:	d90a      	bls.n	8004362 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800434c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004350:	f383 8811 	msr	BASEPRI, r3
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	603b      	str	r3, [r7, #0]
}
 800435e:	bf00      	nop
 8004360:	e7fe      	b.n	8004360 <vPortValidateInterruptPriority+0x60>
	}
 8004362:	bf00      	nop
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	bc80      	pop	{r7}
 800436a:	4770      	bx	lr
 800436c:	e000e3f0 	.word	0xe000e3f0
 8004370:	200019f4 	.word	0x200019f4
 8004374:	e000ed0c 	.word	0xe000ed0c
 8004378:	200019f8 	.word	0x200019f8

0800437c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b08a      	sub	sp, #40	; 0x28
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004384:	2300      	movs	r3, #0
 8004386:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004388:	f7fe fe30 	bl	8002fec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800438c:	4b58      	ldr	r3, [pc, #352]	; (80044f0 <pvPortMalloc+0x174>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004394:	f000 f910 	bl	80045b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004398:	4b56      	ldr	r3, [pc, #344]	; (80044f4 <pvPortMalloc+0x178>)
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4013      	ands	r3, r2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f040 808e 	bne.w	80044c2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d01d      	beq.n	80043e8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80043ac:	2208      	movs	r2, #8
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4413      	add	r3, r2
 80043b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d014      	beq.n	80043e8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f023 0307 	bic.w	r3, r3, #7
 80043c4:	3308      	adds	r3, #8
 80043c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f003 0307 	and.w	r3, r3, #7
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00a      	beq.n	80043e8 <pvPortMalloc+0x6c>
	__asm volatile
 80043d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d6:	f383 8811 	msr	BASEPRI, r3
 80043da:	f3bf 8f6f 	isb	sy
 80043de:	f3bf 8f4f 	dsb	sy
 80043e2:	617b      	str	r3, [r7, #20]
}
 80043e4:	bf00      	nop
 80043e6:	e7fe      	b.n	80043e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d069      	beq.n	80044c2 <pvPortMalloc+0x146>
 80043ee:	4b42      	ldr	r3, [pc, #264]	; (80044f8 <pvPortMalloc+0x17c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d864      	bhi.n	80044c2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80043f8:	4b40      	ldr	r3, [pc, #256]	; (80044fc <pvPortMalloc+0x180>)
 80043fa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80043fc:	4b3f      	ldr	r3, [pc, #252]	; (80044fc <pvPortMalloc+0x180>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004402:	e004      	b.n	800440e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	429a      	cmp	r2, r3
 8004416:	d903      	bls.n	8004420 <pvPortMalloc+0xa4>
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1f1      	bne.n	8004404 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004420:	4b33      	ldr	r3, [pc, #204]	; (80044f0 <pvPortMalloc+0x174>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004426:	429a      	cmp	r2, r3
 8004428:	d04b      	beq.n	80044c2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2208      	movs	r2, #8
 8004430:	4413      	add	r3, r2
 8004432:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	1ad2      	subs	r2, r2, r3
 8004444:	2308      	movs	r3, #8
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	429a      	cmp	r2, r3
 800444a:	d91f      	bls.n	800448c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800444c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4413      	add	r3, r2
 8004452:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	f003 0307 	and.w	r3, r3, #7
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00a      	beq.n	8004474 <pvPortMalloc+0xf8>
	__asm volatile
 800445e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004462:	f383 8811 	msr	BASEPRI, r3
 8004466:	f3bf 8f6f 	isb	sy
 800446a:	f3bf 8f4f 	dsb	sy
 800446e:	613b      	str	r3, [r7, #16]
}
 8004470:	bf00      	nop
 8004472:	e7fe      	b.n	8004472 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	1ad2      	subs	r2, r2, r3
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004486:	69b8      	ldr	r0, [r7, #24]
 8004488:	f000 f8f8 	bl	800467c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800448c:	4b1a      	ldr	r3, [pc, #104]	; (80044f8 <pvPortMalloc+0x17c>)
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	4a18      	ldr	r2, [pc, #96]	; (80044f8 <pvPortMalloc+0x17c>)
 8004498:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800449a:	4b17      	ldr	r3, [pc, #92]	; (80044f8 <pvPortMalloc+0x17c>)
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	4b18      	ldr	r3, [pc, #96]	; (8004500 <pvPortMalloc+0x184>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d203      	bcs.n	80044ae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80044a6:	4b14      	ldr	r3, [pc, #80]	; (80044f8 <pvPortMalloc+0x17c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a15      	ldr	r2, [pc, #84]	; (8004500 <pvPortMalloc+0x184>)
 80044ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	4b10      	ldr	r3, [pc, #64]	; (80044f4 <pvPortMalloc+0x178>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80044c2:	f7fe fda1 	bl	8003008 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00a      	beq.n	80044e6 <pvPortMalloc+0x16a>
	__asm volatile
 80044d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d4:	f383 8811 	msr	BASEPRI, r3
 80044d8:	f3bf 8f6f 	isb	sy
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	60fb      	str	r3, [r7, #12]
}
 80044e2:	bf00      	nop
 80044e4:	e7fe      	b.n	80044e4 <pvPortMalloc+0x168>
	return pvReturn;
 80044e6:	69fb      	ldr	r3, [r7, #28]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3728      	adds	r7, #40	; 0x28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	20002604 	.word	0x20002604
 80044f4:	20002610 	.word	0x20002610
 80044f8:	20002608 	.word	0x20002608
 80044fc:	200025fc 	.word	0x200025fc
 8004500:	2000260c 	.word	0x2000260c

08004504 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d048      	beq.n	80045a8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004516:	2308      	movs	r3, #8
 8004518:	425b      	negs	r3, r3
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	4413      	add	r3, r2
 800451e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	4b21      	ldr	r3, [pc, #132]	; (80045b0 <vPortFree+0xac>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4013      	ands	r3, r2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10a      	bne.n	8004548 <vPortFree+0x44>
	__asm volatile
 8004532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	60fb      	str	r3, [r7, #12]
}
 8004544:	bf00      	nop
 8004546:	e7fe      	b.n	8004546 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <vPortFree+0x62>
	__asm volatile
 8004550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004554:	f383 8811 	msr	BASEPRI, r3
 8004558:	f3bf 8f6f 	isb	sy
 800455c:	f3bf 8f4f 	dsb	sy
 8004560:	60bb      	str	r3, [r7, #8]
}
 8004562:	bf00      	nop
 8004564:	e7fe      	b.n	8004564 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	4b11      	ldr	r3, [pc, #68]	; (80045b0 <vPortFree+0xac>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4013      	ands	r3, r2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d019      	beq.n	80045a8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d115      	bne.n	80045a8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <vPortFree+0xac>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	43db      	mvns	r3, r3
 8004586:	401a      	ands	r2, r3
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800458c:	f7fe fd2e 	bl	8002fec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	4b07      	ldr	r3, [pc, #28]	; (80045b4 <vPortFree+0xb0>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4413      	add	r3, r2
 800459a:	4a06      	ldr	r2, [pc, #24]	; (80045b4 <vPortFree+0xb0>)
 800459c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800459e:	6938      	ldr	r0, [r7, #16]
 80045a0:	f000 f86c 	bl	800467c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80045a4:	f7fe fd30 	bl	8003008 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80045a8:	bf00      	nop
 80045aa:	3718      	adds	r7, #24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	20002610 	.word	0x20002610
 80045b4:	20002608 	.word	0x20002608

080045b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80045be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80045c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80045c4:	4b27      	ldr	r3, [pc, #156]	; (8004664 <prvHeapInit+0xac>)
 80045c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00c      	beq.n	80045ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	3307      	adds	r3, #7
 80045d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f023 0307 	bic.w	r3, r3, #7
 80045de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	4a1f      	ldr	r2, [pc, #124]	; (8004664 <prvHeapInit+0xac>)
 80045e8:	4413      	add	r3, r2
 80045ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80045f0:	4a1d      	ldr	r2, [pc, #116]	; (8004668 <prvHeapInit+0xb0>)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80045f6:	4b1c      	ldr	r3, [pc, #112]	; (8004668 <prvHeapInit+0xb0>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	4413      	add	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004604:	2208      	movs	r2, #8
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	1a9b      	subs	r3, r3, r2
 800460a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f023 0307 	bic.w	r3, r3, #7
 8004612:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4a15      	ldr	r2, [pc, #84]	; (800466c <prvHeapInit+0xb4>)
 8004618:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800461a:	4b14      	ldr	r3, [pc, #80]	; (800466c <prvHeapInit+0xb4>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2200      	movs	r2, #0
 8004620:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004622:	4b12      	ldr	r3, [pc, #72]	; (800466c <prvHeapInit+0xb4>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2200      	movs	r2, #0
 8004628:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	1ad2      	subs	r2, r2, r3
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004638:	4b0c      	ldr	r3, [pc, #48]	; (800466c <prvHeapInit+0xb4>)
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	4a0a      	ldr	r2, [pc, #40]	; (8004670 <prvHeapInit+0xb8>)
 8004646:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	4a09      	ldr	r2, [pc, #36]	; (8004674 <prvHeapInit+0xbc>)
 800464e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004650:	4b09      	ldr	r3, [pc, #36]	; (8004678 <prvHeapInit+0xc0>)
 8004652:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004656:	601a      	str	r2, [r3, #0]
}
 8004658:	bf00      	nop
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	bc80      	pop	{r7}
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	200019fc 	.word	0x200019fc
 8004668:	200025fc 	.word	0x200025fc
 800466c:	20002604 	.word	0x20002604
 8004670:	2000260c 	.word	0x2000260c
 8004674:	20002608 	.word	0x20002608
 8004678:	20002610 	.word	0x20002610

0800467c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004684:	4b27      	ldr	r3, [pc, #156]	; (8004724 <prvInsertBlockIntoFreeList+0xa8>)
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	e002      	b.n	8004690 <prvInsertBlockIntoFreeList+0x14>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	429a      	cmp	r2, r3
 8004698:	d8f7      	bhi.n	800468a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	4413      	add	r3, r2
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d108      	bne.n	80046be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	441a      	add	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	441a      	add	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d118      	bne.n	8004704 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	4b14      	ldr	r3, [pc, #80]	; (8004728 <prvInsertBlockIntoFreeList+0xac>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d00d      	beq.n	80046fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	441a      	add	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	e008      	b.n	800470c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80046fa:	4b0b      	ldr	r3, [pc, #44]	; (8004728 <prvInsertBlockIntoFreeList+0xac>)
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	e003      	b.n	800470c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	429a      	cmp	r2, r3
 8004712:	d002      	beq.n	800471a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800471a:	bf00      	nop
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	bc80      	pop	{r7}
 8004722:	4770      	bx	lr
 8004724:	200025fc 	.word	0x200025fc
 8004728:	20002604 	.word	0x20002604

0800472c <memset>:
 800472c:	4603      	mov	r3, r0
 800472e:	4402      	add	r2, r0
 8004730:	4293      	cmp	r3, r2
 8004732:	d100      	bne.n	8004736 <memset+0xa>
 8004734:	4770      	bx	lr
 8004736:	f803 1b01 	strb.w	r1, [r3], #1
 800473a:	e7f9      	b.n	8004730 <memset+0x4>

0800473c <__libc_init_array>:
 800473c:	b570      	push	{r4, r5, r6, lr}
 800473e:	2600      	movs	r6, #0
 8004740:	4d0c      	ldr	r5, [pc, #48]	; (8004774 <__libc_init_array+0x38>)
 8004742:	4c0d      	ldr	r4, [pc, #52]	; (8004778 <__libc_init_array+0x3c>)
 8004744:	1b64      	subs	r4, r4, r5
 8004746:	10a4      	asrs	r4, r4, #2
 8004748:	42a6      	cmp	r6, r4
 800474a:	d109      	bne.n	8004760 <__libc_init_array+0x24>
 800474c:	f000 f828 	bl	80047a0 <_init>
 8004750:	2600      	movs	r6, #0
 8004752:	4d0a      	ldr	r5, [pc, #40]	; (800477c <__libc_init_array+0x40>)
 8004754:	4c0a      	ldr	r4, [pc, #40]	; (8004780 <__libc_init_array+0x44>)
 8004756:	1b64      	subs	r4, r4, r5
 8004758:	10a4      	asrs	r4, r4, #2
 800475a:	42a6      	cmp	r6, r4
 800475c:	d105      	bne.n	800476a <__libc_init_array+0x2e>
 800475e:	bd70      	pop	{r4, r5, r6, pc}
 8004760:	f855 3b04 	ldr.w	r3, [r5], #4
 8004764:	4798      	blx	r3
 8004766:	3601      	adds	r6, #1
 8004768:	e7ee      	b.n	8004748 <__libc_init_array+0xc>
 800476a:	f855 3b04 	ldr.w	r3, [r5], #4
 800476e:	4798      	blx	r3
 8004770:	3601      	adds	r6, #1
 8004772:	e7f2      	b.n	800475a <__libc_init_array+0x1e>
 8004774:	08004924 	.word	0x08004924
 8004778:	08004924 	.word	0x08004924
 800477c:	08004924 	.word	0x08004924
 8004780:	08004928 	.word	0x08004928

08004784 <memcpy>:
 8004784:	440a      	add	r2, r1
 8004786:	4291      	cmp	r1, r2
 8004788:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800478c:	d100      	bne.n	8004790 <memcpy+0xc>
 800478e:	4770      	bx	lr
 8004790:	b510      	push	{r4, lr}
 8004792:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004796:	4291      	cmp	r1, r2
 8004798:	f803 4f01 	strb.w	r4, [r3, #1]!
 800479c:	d1f9      	bne.n	8004792 <memcpy+0xe>
 800479e:	bd10      	pop	{r4, pc}

080047a0 <_init>:
 80047a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a2:	bf00      	nop
 80047a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047a6:	bc08      	pop	{r3}
 80047a8:	469e      	mov	lr, r3
 80047aa:	4770      	bx	lr

080047ac <_fini>:
 80047ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ae:	bf00      	nop
 80047b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047b2:	bc08      	pop	{r3}
 80047b4:	469e      	mov	lr, r3
 80047b6:	4770      	bx	lr
